(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[,,,,,,,,,,,,,,,,function(e){e.exports=[{type:"blog-post",title:"Brewing tea at the right temperature without a special kettle",url:"/articles/2014-09-22-brewing-tea-water-temperature-calculator",externalUrl:"/articles/2014-09-22-brewing-tea-water-temperature-calculator/article.html",date:"22/09/2014"},{type:"blog-post",title:"Paulstretch algorithm with Web Audio API, and how to delegate audio processing to web workers",url:"/articles/2014-11-17-delegating-audio-processing-to-web-worker",date:"17/11/2014"},{type:"blog-post",title:"Rhizome, interactive performances and network topologies",url:"/articles/2015-08-25-network-topologies-for-live-performances",date:"25/08/2015"},{type:"blog-post",title:"Audio glitches with a linux terminal",url:"/articles/2016-01-15-audio-glitches-with-linux-terminal",date:"15/01/2016"},{type:"blog-post",title:"Using Web Audio API in production",url:"/articles/2017-02-23-using-web-audio-api-in-production",date:"23/02/2017"},{type:"academic",title:"Fields: An Exploration into the Use of Mobile Devices as a Medium for Sound Diffusion",url:"https://dl.acm.org/doi/abs/10.5555/2993778.2993848",date:"01/05/2015"},{type:"essay",title:" L\u2019art nous emp\xeache de construire un monde meilleur.",externalUrl:"https://blogs.mediapart.fr/sebastien-piquemal/blog/051222/l-art-nous-empeche-de-construire-un-monde-meilleur",date:"07/12/2022"}]},,,,,,,function(e){e.exports=[{name:"racolage.xxx",description:"A record label that releases experimental music through spam email, porn streaming sites, tinder, and other spammy release channels...",url:"https://racolage.xxx",events:[]},{name:"Atmosphere | La Jet\xe9e",description:"A re-score of short film La Jet\xe9e by Chris Marker, in a performance that explores digital mobile technology and hyperlocal networks for surround sound diffusion.",url:"/la-jetee",events:[{type:"concert",date:"19/02/2017",venue:"Glasgow Film Festival, Scotland"},{type:"concert",date:"19/08/2016",venue:"Assembly Rooms, Edinburgh, Scotland"}]},{name:"ParaFonoM",url:"http://binauralmedia.org/news/en/arquivo/8954",events:[{type:"residency",date:"10/10/2016",end_date:"30/10/2016",venue:"Nodar residency (SoCCoS), Vouzela, Portugal"}]},{name:"Freedom Portal",description:"A captive portal software for OpenWrt which allows to create Wi-Fi hotspots embedding digital artworks in the public space.",url:"/freedom-portal",events:[{type:"exhibition",date:"01/09/2017",end_date:"31/12/2017",venue:"Ateneum, Helsinki, Finland",subtitle:"Work by Minna Henriksson - Scientific illustrations to keep silent about"},{type:"exhibition",date:"01/09/2017",end_date:"31/12/2017",venue:"Kansallismuseo, Helsinki, Finland",subtitle:"Work by Steve Maher - N\xf3r\xeb Carm\xebcoa"},{type:"exhibition",date:"01/09/2017",end_date:"31/12/2017",venue:"Kiasma, Helsinki, Finland",subtitle:"Work by Third Space collective - Un-allowed Open Call"},{type:"exhibition",date:"19/08/2016",end_date:"21/08/2016",venue:"Electropixel, Nantes, France"},{type:"residency",date:"11/04/2016",venue:"Stereolux residency, Nantes, France"}]},{name:"Possessed Rooms",description:"A series of parasitic performances happening in public computer rooms.",url:"/possessed-rooms",events:[{type:"performance",date:"11/03/2016",venue:"\xc4\xe4niaalto, Helsinki, Finland"}]},{name:"Murmurate / Fields",description:"A performance using mobile devices of the audience members as a sound system.",url:"/murmurate",events:[{type:"concert",date:"28/09/2016",venue:"Sight and Sound festival, Montreal, Canada"},{type:"concert",date:"01/07/2016",venue:"The Wired Lab, Wagga-Wagga, Australia"},{type:"concert",date:"14/05/2016",venue:"Cumberland Arms, Newcastle, England"},{type:"concert",date:"13/05/2016",venue:"FACT, Liverpool, England"},{type:"concert",date:"20/04/2016",venue:"Stereolux, Nantes, France"},{type:"concert",date:"26/09/2015",venue:"Sanctuary, Galloway, Scotland"},{type:"workshop",date:"13/04/2016",venue:"Stereolux, Nantes, France"},{type:"concert",date:"19/11/2015",venue:"Piksel festival, Bergen, Norway"},{type:"concert",date:"10/10/2015",venue:"Connect the Dots festival, Sheffield, England"},{type:"concert",date:"02/06/2015",venue:"NIME, Baton Rouge, USA"},{type:"concert",date:"23/04/2015",venue:"Durham Castle, Durham, England"},{type:"concert",date:"22/04/2015",venue:"Islington Mill, Manchester, England"},{type:"concert",date:"19/04/2015",venue:"Ulverston Parish Rooms, Ulverston, England"},{type:"concert",date:"17/04/2015",venue:"EAVI, Goldsmiths, London, England"},{type:"concert",date:"16/04/2015",venue:"Music Hack Space, London, England"},{type:"concert",date:"14/04/2015",venue:"The Louisiana Cellar, Bristol, England"},{type:"concert",date:"12/04/2015",venue:"Cafe OTO, London, England"},{type:"concert",date:"11/04/2015",venue:"Other Worlds Festival, Blackpool, England"},{type:"concert",date:"09/04/2015",venue:"Green Door Store, Brighton, England"},{type:"concert",date:"09/04/2015",venue:"University of Sussex, Brighton, England"},{type:"concert",date:"27/01/2015",venue:"WAC, Ircam, Paris, France"},{type:"concert",date:"24/01/2015",venue:"Gap in the Air, Edinburgh, Scotland"},{type:"concert",date:"23/11/2014",venue:"ICLI, Z\xe9 Dos Bois, Lisbo, Portugal"},{type:"concert",date:"27/10/2014",venue:"NordiCHI, Helsinki, Finland"},{type:"concert",date:"25/10/2014",venue:"Third Space, Helsinki, Finland"},{type:"concert",date:"10/10/2014",venue:"NK, Berlin, Germany"},{type:"concert",date:"19/09/2014",venue:"ICMC, Athens, Greece"},{type:"concert",date:"22/06/2014",venue:"Mining Institute, Newcastle-upon-Tyne, England"},{type:"concert",date:"08/04/2014",venue:"Arkadia bookstore, Helsinki, Finland"}]},{name:"New Weave",description:"An experimental sound performance where the performers improvise with small audio snippets recorded and sent live by audience members with their smartphones.",url:"/newweave",events:[{type:"concert",date:"15/08/2015",venue:"Flow festival, Helsinki, Finland"},{type:"concert",date:"22/01/2015",venue:"Third Space, Helsinki, Finland"},{type:"concert",date:"20/05/2015",venue:"Vapaan Taiteen Tila, Helsinki, Finland"}]},{name:"Rhizome",description:"A web server for realizing interactive performances and installations.",url:"https://github.com/sebpiq/rhizome",events:[]},{name:"WebPd",description:"A JavaScript version of the popular graphical programming language Pure Data.",url:"/webpd",events:[{type:"workshop",date:"02/2013",venue:"Network Music Festival, Birmingham, UK"}]}]},function(e){e.exports=[{name:"Son et r\xe9seaux",url:"https://github.com/sebpiq/cours-son-reseaux",description:"3-days intensive class presenting a technical and critical perspective on computer networks and online sound.",events:[{date:"12/2020",venue:"\xc9cole des beaux-arts, Paris, France"}]},{name:"Distributed Music Workshop",url:"https://github.com/taylorbf/distributed-music-workshop",description:"Workshop with Ben Taylor on designing your own distributed music instrument capable of distributing sound events to audience mobile devices using NexusUI, Rhizome, and WebPd.",events:[{date:"05/2017",venue:"NIME 2017, Copenhagen, Denmark"}]},{name:"Pure Data and Raspberry Pi Workshop",url:"/pure-data-and-raspberry-pi-workshops",description:"Teaching how to program and design a pocket-sized instrument with Pure Data and Raspberry Pi.",events:[{date:"04/2014",venue:"CC4AV / AAVE, Helsinki, Finland"},{date:"10/2013",venue:"CC4AV, Riga, Latvia"},{date:"04/2014",venue:"CC4AV / AAVE, Helsinki, Finland"}]},{name:"Pure Data Workshop",events:[{date:"10/2016",venue:"Technical highschool, Vouzela, Portgual"},{date:"07/2013",venue:"Telegraf, Moscow, Russia"}]}]},,,function(e,a,n){},,,,function(e){e.exports=[{start:2018,end:2020,company:"Kialo",title:"Full stack developer and creative concepter",description:["Architect and programmer as part of one of Kialo\u2019s Agile development teams.","Led ideation and prototyping for entirely new use-cases of the platform."],tech_stack:["Python","React","Redux","TypeScript","MongoDB","Docker","AWS"]},{start:2018,end:2018,company:"Volkswagen FCE",title:"Creative programmer and concepter",description:["Worked on self-driving cars and urban mobility ecosystems of the future.","Developed concepts and prototypes to offer new perspectives on how Volkswagen could fit within this new ecosystems."],tech_stack:["Ionic","React","Redux","Python","Docker","Raspberry Pi"]},{start:2017,end:2018,company:"Solinor",title:"Full stack web developer and backend architect",description:["Backend architect, helped building a full cloud computing platform (similar to AWS).","Worked for clients such as Nokia, VR (national train company of Finland), Helen (energy company of the city of Helsinki) and others ..."],tech_stack:["Python","React Native","Node.js","React","Kafka","Docker","AWS"]},{start:2014,end:"now",company:"Freelance",title:"Media artist and developer",description:["Presented my projects in dozens of art and technology venues around the world.","Recipient of several grants (Finnish Arts Council, British Arts Council, etc ...)."]},{start:2016,end:2017,company:"Moprim",title:"Full stack web developer",description:["Backend and data programmer, developed a transport mode detection SDK using built-in sensors start smartphones."]},{start:2013,end:2013,company:"Dream Industries",title:"Creative programmer",description:["Generative music applications around music streaming service Zvooq, by then number one music streaming service in Russia."]},{start:2010,end:2013,company:"Futurice",title:"Full stack web developer",description:["Developed internal web-based IT services for Futurice.","Futurice was elected best place to work in Europe by the Great place to work institute in 2012 and 2013."],tech_stack:["Python","Django","Node.js"]},{start:2011,end:2014,company:"Aidbrella",title:"Full stack web developer",description:["Lead developer for Aidbrella/Twines project, a social network for organizations working in the sector of public good."]}]},,,,,function(e,a,n){e.exports=n(57)},,,,,function(e,a,n){},function(e,a,n){},function(e,a,n){},function(e,a,n){},,,,,function(e,a,n){},function(e,a,n){},function(e,a,n){},,function(e,a,n){},function(e,a,n){},function(e,a,n){},function(e,a,n){},function(e,a,n){"use strict";n.r(a);var t=n(0),s=n.n(t),o=n(12),r=n.n(o),i=(n(41),n(6)),c=n(7),l=n(34),p=(n(42),n(13)),d=n(14),u=n(18),h=n(15),m=n(19),f=(n(43),n(17)),b=[160,8240,8256,8480,8496,8592,8608,8976,8992,9152,9184,9200,9408,9632,9648,9664,9712,9728,9744,9760,9776,9792,9808,9824,9840,9872,9888,9904,9920,9936,9952,9968,9984,1e4,10016,10032,10048,10064,10080,10128,10144,10160,10544,11008,11024,11088,12336,12944,126976,127168,127344,127360,127376,127488,127504,127520,127536,127568,127744,127760,127776,127792,127808,127824,127840,127856,127872,127888,127904,127920,127936,127952,127968,127984,128e3,128016,128032,128048,128064,128080,128096,128112,128128,128144,128160,128176,128192,128208,128224,128240,128256,128272,128288,128304,128320,128336,128352,128368,128384,128400,128416,128432,128448,128464,128480,128496,128512,128528,128544,128560,128576,128640,128656,128672,128688,128704,128720,128736,128752,128992,129280,129296,129312,129328,129344,129360,129376,129392,129408,129424,129440,129456,129472,129488,129504,129520,129648,129664,129680],g=function(){var e=b[Math.floor(Math.random()*b.length)]+Math.floor(16*Math.random());return String.fromCodePoint(e)},w=function(e){return e.startsWith("https://")||e.startsWith("http://")},v=function(e){var a=new Date,n=e.split("/");return a.setFullYear.apply(a,Object(f.a)(n.map(parseFloat).reverse())),+a},y=150,k=!1,E=.12,x=.09,C=7,I=function(e){function a(e){var n;return Object(p.a)(this,a),(n=Object(u.a)(this,Object(h.a)(a).call(this,e)))._backgroundOnfirstClick=function(){setTimeout(function(){return n.setState({background:!0})},100)},n._renderText=function(){if(n.props.width&&n.props.height){var e=g();k&&n.canvasCtx.clearRect(0,0,n.props.width,n.props.height),n.canvasCtx.fillText(e,Math.round(n.props.width/2),Math.round(n.props.height/2)),setTimeout(function(){for(var e=0;e<C;e++){var a=Math.floor(Math.random()*n.props.width),t=Math.floor(Math.random()*n.props.height),s=E*n.props.width,o=E*n.props.height,r=a-s/2,i=t-o/2,c=r+(2*Math.random()-1)*(n.props.width*x),l=i+(2*Math.random()-1)*(n.props.height*x),p=n.canvasCtx.getImageData(r,i,s,o),d=n.canvasCtx.getImageData(c,l,s,o);n.canvasCtx.putImageData(p,c,l),n.canvasCtx.putImageData(d,r,i)}},y/2)}},n.canvasRef=s.a.createRef(),n.canvasCtx=null,n.intervalHandle=null,n.state={background:!1},n}return Object(m.a)(a,e),Object(d.a)(a,[{key:"componentDidMount",value:function(){this._refsUpdated(),this._propsUpdated(),this.intervalHandle=setInterval(this._renderText,y)}},{key:"componentDidUpdate",value:function(){this._propsUpdated()}},{key:"componentWillUnmount",value:function(){this.intervalHandle&&clearInterval(this.intervalHandle)}},{key:"render",value:function(){var e="BackgroundCanvas"+(this.state.background?" background":"");return s.a.createElement("canvas",{className:e,width:this.props.width,height:this.props.height,ref:this.canvasRef,onClick:this.state.background?void 0:this._backgroundOnfirstClick,onTouchEnd:this.state.background?void 0:this._backgroundOnfirstClick})}},{key:"_refsUpdated",value:function(){this.canvasCtx=this.canvasRef.current.getContext("2d")}},{key:"_propsUpdated",value:function(){this.canvasCtx.fillStyle="white",this.canvasCtx.font="256px monospace",this.canvasCtx.textAlign="center",this.canvasCtx.textBaseline="middle"}}]),a}(s.a.Component),S=(n(44),n(28)),A=n.n(S)()(function(e){var a=e.width;return{columnCount:a<800?1:a<=1500?3:4}})(function(e){var a=e.children,n=e.columnCount,t=Math.floor(a.length/n),o=a.length-t*n,r=0,i=Object(f.a)(Array(n)).map(function(e,n){var i=t+(n<o?1:0),c=a.slice(r,r+i);return r+=i,s.a.createElement("div",{key:n},c)});return s.a.createElement("div",{className:"TileContainer"},i)}),T=function(e){return e.href?w(e.href)?s.a.createElement("a",Object.assign({target:"_blank",rel:"noopener noreferrer"},e),e.children):s.a.createElement(i.b,{to:e.href},e.children):e.children};n(27);var P=function(e){return s.a.createElement("div",{className:"Tile"},s.a.createElement(T,{href:e.url},function(e){var a=e.url,n=e.header,o=e.date,r=e.activityType,i=e.preview;return s.a.createElement(t.Fragment,null,s.a.createElement("div",{key:"header",className:"Tile__header"},s.a.createElement("span",null,n),w(a)?s.a.createElement("img",{className:"Tile__external-link",src:"/images/external-link.svg",alt:"home"}):null),s.a.createElement("div",{key:"preview",className:"Tile__body"},i),o&&r?s.a.createElement("div",{key:"footer",className:"Tile__footer"},s.a.createElement("div",{key:"date",className:"Tile__date"},o)," | ",s.a.createElement("div",{key:"activityType",className:"Tile__activityType"},r)):null)}(e)))},j=function(e){return s.a.createElement("div",{className:"Tile"},s.a.createElement("div",{className:"Tile__header"},s.a.createElement("span",null,"Contact")),s.a.createElement("div",{className:"Tile__body"},s.a.createElement("div",null,s.a.createElement("img",{src:"/images/external-link.svg",alt:"external link"}),s.a.createElement("a",{href:"https://github.com/sebpiq"},"github")),s.a.createElement("div",null,s.a.createElement("img",{src:"/images/external-link.svg",alt:"external link"}),s.a.createElement("a",{href:"mailto://sebpiq@gmail.com"},"email")),s.a.createElement("div",null,s.a.createElement("img",{src:"/images/external-link.svg",alt:"external link"}),s.a.createElement("a",{href:"https://vimeo.com/sebpiq/"},"vimeo"))))},_=(n(49),function(e){function a(e){var n;return Object(p.a)(this,a),(n=Object(u.a)(this,Object(h.a)(a).call(this,e)))._scrollToTop=function(){n.pageRef.current.scrollTo(0,0)},n.pageRef=s.a.createRef(),n}return Object(m.a)(a,e),Object(d.a)(a,[{key:"render",value:function(){var e="Page "+(this.props.className||"");return s.a.createElement("div",{className:e,ref:this.pageRef},this.props.children,s.a.createElement("button",{className:"Page__scroll_to_top",onClick:this._scrollToTop},"^"))}}]),a}(s.a.Component)),F=(n(50),function(e){var a="/"+Object(c.g)().pathname.split("/").filter(function(e){return e.length}).slice(0,-1).join("/");return s.a.createElement("h1",{className:"PageTitle"},s.a.createElement(i.b,{to:a,className:"PageTitle__navigate_index"},s.a.createElement("span",null,"<")),s.a.createElement("span",{className:"PageTitle__text"},e.text))});function W(e){var a=e.videoId,n="https://player.vimeo.com/video/".concat(a,"?portrait=0");return s.a.createElement(t.Fragment,null,s.a.createElement("div",{style:{padding:"56.25% 0 0 0",position:"relative"}},s.a.createElement("iframe",{title:"vimeo ".concat(a),src:n,style:{position:"absolute",top:"0",left:"0",width:"100%",height:"100%"},frameBorder:"0",allow:"autoplay; fullscreen",allowFullScreen:!0})),s.a.createElement("script",{src:"https://player.vimeo.com/api/player.js"}))}n(51);var q=function(e){return s.a.createElement("div",{className:"CenteredImage"},s.a.createElement("img",Object.assign({src:e.src,key:e.src,alt:e.alt||e.src},e)))},N=function(){return s.a.createElement(_,null,s.a.createElement(F,{text:"Freedom Portal"}),s.a.createElement("p",null,"\u200b The Freedom Portal project was developed in collaboration with ",s.a.createElement("a",{href:"https://tim-shaw.net/"},"Tim Shaw")," as a platform to organize unauthorized shows in the public space. It was first prototyped in a residency at ",s.a.createElement("a",{href:"https://www.stereolux.org/"},"Stereolux")),s.a.createElement("p",null,"The platform works in the following way :"),s.a.createElement("ul",null,s.a.createElement("li",null,"We choose a public venue where to organize a show."),s.a.createElement("li",null,"We create there an official-looking WiFi network, by plugging-in wireless routers to sockets on the wall."),s.a.createElement("li",null,"We let visitors be tricked into connecting to this network. They will unintentionally experience the installation as it pops-up onto their phones.")),s.a.createElement("h2",null,"Third Space Helsinki collaboration"),s.a.createElement(W,{videoId:"254006804"}),s.a.createElement("p",null,"Throughout 2017, in collaboration with ",s.a.createElement("a",{href:"http://www.th1rdspac3.com/"},"Third Space")," and artists Minna Henriksson and Steve Maher, we produced three works targeting the three biggest art museums in Finland : ",s.a.createElement("b",null,"Kiasma, Ateneum and Kansallismuseo"),". Each work was a rip-off of the museum's official web page, assuming the identity of the institution in order to challenge some of its positions. Together these installations received about 4500 visitors and each lasted for about a month until they were discovered and removed by the museum's staff."),s.a.createElement("h3",null,"Ateneum | Minna Henriksson | Scientific illustrations to keep silent about"),s.a.createElement("p",null,"The intervention adds to knowledge about the oeuvre of the widely loved von Wright brothers, whose blockbuster exhibition opened in Ateneum in October 2017. In the WiFi network of Ateneum we could see what the exhibition didn\u2019t show. Such were Wilhelm von Wright\u2019s racial studies of Rufina in 1843. Rufina was a 10 years old girl, shipped from Argentina to Sweden all by herself on request of race scientist Anders Retzius, who needed \u201can indigenous specimen\u201d. After the drawings and measurements, she was given to an upper class family in Gothenburg as servant. ",s.a.createElement("a",{href:"http://minnahenriksson.com"},"http://minnahenriksson.com")),s.a.createElement(q,{src:"/images/projects/freedom-portal-8.png"}),s.a.createElement("h3",null,"Kansallismuseo | Steve Maher | N\xf3r\xeb Carm\xebcoa"),s.a.createElement("p",null,"The Finnish National Museum's website Translated to Tolkien's High Elvish, Quenya, which is based on Finnish. The project reflects on the nature of national institutions as venues through which state actors mythpoecise the past in the process of building national identity. ",s.a.createElement("a",{href:"http://www.stevemaher.net/"},"http://www.stevemaher.net/")),s.a.createElement(q,{src:"/images/projects/freedom-portal-9.png"}),s.a.createElement("h3",null,"Kiasma | Third Space collective | Un-allowed Open Call"),s.a.createElement("p",null,'Installed during the "ARS17 - Hello World!" exhibition. Each visitor can submit their artworks as a file, and these would be (supposedly) considered for inclusion into Kiasma\'s permanent exhibition. Large parts of the open call text are directly copied from the actual website of Kiasma.'),s.a.createElement(q,{src:"/images/projects/freedom-portal-10.png"}),s.a.createElement("h2",null,"Electropixel"),s.a.createElement("p",null,"We installed three works as part of ",s.a.createElement("a",{href:"http://electropixel.org/tim-shaw-sebastien-piquemal/"},"electropixel #6")," in Nantes, 2016."),s.a.createElement("h3",null,"S\xe9bastien Piqumal | wlandalisme"),s.a.createElement("p",null,"This piece allows participants to vandalize the public Wi-Fi space by posting a small message of less than 32 characters. Once submitted their text will appear as an available network in that area. To submit your own message connect to the network \u201cwlandalisme\u201d, open a web page, write a message and click on the button to post it. If you fail to post, check that you are still connected to the \u201cwlandalisme\u201d Wi-Fi and try one more time. Then open your phone\u2019s settings to display the list of available Wi-Fi networks in the area. Your message might take a little while to appear."),s.a.createElement(q,{src:"/images/projects/freedom-portal-2.jpg",style:{width:"50%"}}),s.a.createElement("h3",null,"Tom Schofield | 192.168.0.1:Where the WiFi comes from"),s.a.createElement("p",null,"\u2018192.168.0.1:Where the Wi-Fi Comes From\u2019 takes a live image grab of the router at the time of accessing the network. Instead of allowing access to the wider Internet the router remains locked in a self-referential and exhibitionist cycle. The time of access is presented to the user referencing the complex temporal interdependencies of networked technologies."),s.a.createElement(q,{src:"/images/projects/freedom-portal-4.jpg",style:{width:"50%"}}),s.a.createElement("h3",null,"Antonio Roberts \u2013 Freemium Basics"),s.a.createElement("p",null,"\u201cIf you are not paying for it, you\u2019re not the customer; you\u2019re the product being sold\u201d. This phrase said by Andrew Lewis aka blue_beetle in 2010 should make any user wary of using free services. The promises of corporations offering \u201cexclusive\u201d \u201cpremium\u201d gifts \u2013 loyalty cards, free wifi, vouchers etc \u2013 is that it will make your life better, easier, help you, help others, and ultimately make the world a better place. By accepting these \u201cgifts\u201d we give permission to these corporations to enter our lives, track our social, spending, and general living habits. With this information they can greatly influence the opinion and habits of us and our social circles. These free \u201cgifts\u201d, then, come at a price. Using Free Basics (previously Internet.org) as its target, which is Facebook\u2019s failed attempt to gift \u201cfree internet\u201d to India, Freemium Basics sheds light on the dangers of clicking \u201cI Accept\u201d on free services without considering the costs."),s.a.createElement(q,{src:"/images/projects/freedom-portal-3.jpg",style:{width:"50%"}}),s.a.createElement("h2",null,"Supports"),s.a.createElement("a",{href:"https://www.taike.fi"},"Taike")," | ",s.a.createElement("a",{href:"https://tokyo.fi/kipsari"},"Kipsari")," | ",s.a.createElement("a",{href:"https://www.stereolux.org/"},"Stereolux"),s.a.createElement("h2",null,"Links"),s.a.createElement("ul",null,s.a.createElement("li",null,s.a.createElement("a",{href:"https://github.com/sebpiq/FreedomPortal"},"Source code and instructions to install the system"))))},O=function(){return s.a.createElement(_,null,s.a.createElement(F,{text:"La Jet\xe9e (movie concert)"}),s.a.createElement("p",null,"In the aftermath of World War III, survivors live underground in a post-apocalyptic Paris where scientists research time travel to rescue the present."),s.a.createElement("p",null,"With live narration by David McKechnie, Tim Shaw and S\xe9bastien Piquemal re-score this acclaimed short film by Chris Marker in a performance that explores digital mobile technology and hyperlocal networks for surround sound diffusion."),s.a.createElement(q,{src:"/images/projects/la-jetee-1.jpg"}),s.a.createElement(q,{src:"/images/projects/la-jetee-2.jpg"}),s.a.createElement("p",null,"Image \xa9 ",s.a.createElement("a",{href:"http://www.chrisdonia.co.uk/"},"http://www.chrisdonia.co.uk/")),s.a.createElement("p",null,"This performance was produced by ",s.a.createElement("a",{href:"http://www.mediascot.org/"},"New Media Scotland"),"."),s.a.createElement("h2",null,"Links"),s.a.createElement("ul",null,s.a.createElement("li",null,s.a.createElement("a",{href:"http://github.com/sebpiq/fields"},"Source code of the Fields system, used in the performance"))))};function z(e){var a=e.videoId,n="//www.youtube.com/embed/".concat(a);return s.a.createElement("iframe",{title:"youtube ".concat(a),width:"100%",height:"50%",src:n,frameBorder:"0",allowFullScreen:!0})}var M=function(){return s.a.createElement(_,null,s.a.createElement(F,{text:"Murmurate"}),s.a.createElement(W,{videoId:"144312243"}),s.a.createElement("p",null,s.a.createElement("strong",null,"Murmurate")," (previously called Fields) is a networked system exploring new areas of musical performance and audience participation through the use of mobile technology as a medium for sound diffusion. This project is realized in collaboration with artist ",s.a.createElement("a",{href:"http://tim-shaw.net"},"Tim Shaw"),"."),s.a.createElement(q,{src:"/images/projects/fields-6.jpg"}),s.a.createElement(q,{src:"/images/projects/fields-1-smaller.png"}),s.a.createElement("p",null,"Image \xa9 ",s.a.createElement("a",{href:"http://www.chrisdonia.co.uk/"},"http://www.chrisdonia.co.uk/")),s.a.createElement("p",null,"Murmurate has been performed around Europe and in the USA. Venues include Cafe OTO (UK), FACT Liverpool (UK), Piksel (NOR), Stereolux (FR) Islington Mill (UK), ZDB (PRT), NK Project (DEU), NIME (USA), Talbot Rice Gallery (UK) and Third Space (FIN)."),s.a.createElement("p",null,"Murmurate has been kindly supported by New Media Scotland, Newcastle Institute for Creative Arts Practice, Culture Lab, Media Lab Helsinki, The Creative Exchange and Sound and Music."),s.a.createElement("h2",null,"Links"),s.a.createElement("ul",null,s.a.createElement("li",null,s.a.createElement("a",{href:"http://github.com/sebpiq/fields"},"Source code of the Fields system, used in Murmurate")),s.a.createElement("li",null,s.a.createElement("a",{href:"https://nime2015.lsu.edu/proceedings/196/index.html"},"Paper in proceedings of NIME 2015"))),s.a.createElement("h2",null,"Supports"),s.a.createElement("p",null,s.a.createElement("a",{href:"https://taike.fi"},"The Finnish Arts Council (Taike)")," | ",s.a.createElement("a",{href:"https://www.aalto.fi/en/aalto-media-lab"},"Media Lab Helsinki")," | ",s.a.createElement("a",{href:"http://www.soundandmusic.org/"},"Sound and Music (UK national agency for New Music)")," | ",s.a.createElement("a",{href:"https://www.ncl.ac.uk/creativearts/"},"NICAP")),s.a.createElement("h2",null,"More videos"),s.a.createElement(W,{videoId:"120524097"}),s.a.createElement(z,{videoId:"P1aj6vwFITI"}))},D=function(){return s.a.createElement(_,null,s.a.createElement(F,{text:"New Weave"}),s.a.createElement(W,{videoId:"120474851"}),s.a.createElement("p",null,s.a.createElement("strong",null,"New Weave")," is an experimental sound performance where the performers improvise with small audio snippets recorded and sent live by audience members with their smartphones."),s.a.createElement("h2",null,"Supports"),s.a.createElement("p",null,s.a.createElement("a",{href:"https://taike.fi"},"The Finnish Arts Council (Taike)")," | ",s.a.createElement("a",{href:"https://www.aalto.fi/en/aalto-media-lab"},"Media Lab Helsinki"),"."),s.a.createElement("h2",null,"Links"),s.a.createElement("ul",null,s.a.createElement("li",null,s.a.createElement("a",{href:"http://github.com/sebpiq/rhizome"},"Source code of the rhizome system, used in the performance"))))},L=function(){return s.a.createElement(_,null,s.a.createElement(F,{text:"Pure Data And Raspberry Pi Workshops"}),s.a.createElement("p",null,"Teaching how to program and design a pocket-sized instrument with Pure Data and Raspberry Pi."),s.a.createElement(q,{src:"/images/projects/pd-rpi-workshop-3.jpg"}),s.a.createElement(W,{videoId:"98737686"}),s.a.createElement(W,{videoId:"76642179"}),s.a.createElement(W,{videoId:"76307579"}),s.a.createElement("p",null,"Produced by ",s.a.createElement("a",{href:"https://www.cc4av.com/"},"CC4AV")))},B=function(){return s.a.createElement(_,null,s.a.createElement(F,{text:"WebPd"}),s.a.createElement("p",null,"WebPd is a 100% JavaScript Pure Data runtime using Web Audio API to play audio in the browser. It aims at allowing a subset of Pure Data programming language to run in the browser without plugins and with best possible performance."),s.a.createElement("h2",null,"Links"),s.a.createElement("ul",null,s.a.createElement("li",null,s.a.createElement("a",{href:"http://github.com/sebpiq/WebPd"},"WebPd on github"))))},R=function(){return s.a.createElement(_,null,s.a.createElement(F,{text:"Possessed Rooms"}),s.a.createElement("p",null,s.a.createElement("strong",null,"Possessed rooms")," is a series of parasitic performances happening in public computer rooms. The project is a collaboration with ",s.a.createElement("a",{href:"http://fernandovisockis.net/"},"Fernando Visockis"),"."),s.a.createElement(W,{videoId:"165747866"}),s.a.createElement("p",null,s.a.createElement("strong",null,"possessed room #1")," Media Lab Helsinki, computer room 515."),s.a.createElement("ul",null,s.a.createElement("li",null,"13 desktop computers, custom made software."),s.a.createElement("li",null,"Audio : samples extracted from thousands of random SoundCloud tracks."),s.a.createElement("li",null,"Visuals : Random images of country leaders downloaded from twitter."),s.a.createElement("li",null,"Live recording, 11/03/2016.")),s.a.createElement("h2",{id:"links"},"Links"),s.a.createElement("ul",null,s.a.createElement("li",null,s.a.createElement("a",{href:"http://github.com/sebpiq/rhizome"},"Source code of the rhizome system, used in the performance"))))},H=n(8),U=n(10),V=n.n(U),Y=n(23),K=n(24),X=n(31),J=(n(53),[]);Y.forEach(function(e){e.events.forEach(function(a){J.push({projectName:e.name,projectUrl:e.url,date:a.date,timestamp:v(a.date),venue:a.venue})})}),J=V()(J,function(e){return-e.timestamp}),Y.forEach(function(e){var a=e.events.filter(function(e){return["workshop"].includes(e.type)});a.length&&K.push(Object(H.a)({},e,{name:"".concat(e.name," Workshop"),events:a}))});var Z=K.map(function(e,a){return Object(H.a)({},e,{events:V()(e.events.map(function(e){return Object(H.a)({},e,{timestamp:v(e.date)})}),function(e){return-e.timestamp})})}),G=V()(X,function(e){return-e.start}),Q=function(){var e=J.map(function(e,a){return s.a.createElement("li",{key:a},s.a.createElement("span",{className:"Brag__date"},e.date),s.a.createElement(T,{href:e.projectUrl},s.a.createElement("span",{className:"Brag__name"},e.projectName)),s.a.createElement("span",{className:"Brag__venue"},e.venue))}),a=Z.map(function(e,a){var n=e.events.map(function(e,a){return s.a.createElement("li",{key:a},s.a.createElement("span",{className:"Brag__date"},e.date),s.a.createElement("span",{className:"Brag__venue"},e.venue))});return s.a.createElement("li",{key:e.name},s.a.createElement(T,{href:e.url},s.a.createElement("span",{className:"Brag__name"},e.name)),s.a.createElement("ul",{className:"Brag__sublist"},n))}),n=G.map(function(e,a){var n=e.description.map(function(e,a){return s.a.createElement("li",{key:a},e)});return s.a.createElement("li",{key:e.company},s.a.createElement("span",{className:"Brag__date"},e.start," - ",e.end," :"),s.a.createElement("span",{className:"Brag__name"},e.company," - ",e.title),s.a.createElement("ul",{className:"Brag__sublist"},n))});return s.a.createElement(_,{className:"Brag"},s.a.createElement(F,{text:"Present and past activities"}),s.a.createElement("h2",null,"Permanent Positions"),s.a.createElement("ul",null,n),s.a.createElement("h2",null,"Concerts, Exhibitions"),s.a.createElement("ul",null,e),s.a.createElement("h2",null,"Teaching"),s.a.createElement("ul",null,a))},$=n(16),ee=(n(54),$.filter(function(e){return"blog-post"===e.type}).map(function(e,a){return Object(H.a)({},e,{htmlStr:{"/articles/2014-09-22-brewing-tea-water-temperature-calculator":'<!DOCTYPE html>\n<html xmlns="http://www.w3.org/1999/xhtml" lang="" xml:lang="">\n<head>\n  <meta charset="utf-8" />\n  <meta name="generator" content="pandoc" />\n  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />\n  <title>article</title>\n  <style>\n    code{white-space: pre-wrap;}\n    span.smallcaps{font-variant: small-caps;}\n    span.underline{text-decoration: underline;}\n    div.column{display: inline-block; vertical-align: top; width: 50%;}\n    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n    ul.task-list{list-style: none;}\n  </style>\n  \x3c!--[if lt IE 9]>\n    <script src="//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js"><\/script>\n  <![endif]--\x3e\n</head>\n<body>\n<p>With this simple calculator, you can finally brew your fancy tea at the proper temperature!</p>\n\x3c!--more--\x3e\n<p>Usage is very simple. Just input all the infos in the boxes below, and mix your <strong>V_boiled</strong> of boiled water with <strong>V_tap</strong> of tap water to get the desired <strong>T_brew</strong> temperature.</p>\n<p><input name="T_tap" class="water-temperature-tea" type="text" value="20" /> <strong>T_tap</strong> <em>temperature of the water coming out your tap (Celsius)</em></p>\n<p><input name="T_brew" class="water-temperature-tea" type="text" value="70" /> <strong>T_brew</strong> <em>temperature desired for the brew (Celsius)</em></p>\n<p><input name="V_boiled" class="water-temperature-tea" type="text" value="1"/> <strong>V_boiled</strong> <em>volume of boiled water (Liters)</em></p>\n<p><span id="V_tap" style="font-weight:bold;padding:0.5em;background-color:#aaa"></span> <strong>V_tap</strong> <em>volume of tap water to add to the boiled water (Liters)</em></p>\n<p>Of course this is a bit approximative, as you most likely don\u2019t know the exact temperature of your tap water, and volumes are approximated as well, and mass volumique of water is not temperature-constant, \u2026 blablabla</p>\n<script type="text/javascript">\nconsole.log(\'BLABLAB\')\n  // T_tap : temperature of tap water\n  // T_brew : final temperature desired\n  // V_boiled : volume of boiled water\n  var calculate = function(T_tap, T_brew, V_boiled) {\n    return V_boiled *  (100 - T_brew) / (T_brew - T_tap)\n  }\n\n  var refresh = function() {\n    var T_tap = parseFloat(document.querySelector(\'input[name="T_tap"]\').value)\n      , T_brew = parseFloat(document.querySelector(\'input[name="T_brew"]\').value)\n      , V_boiled = parseFloat(document.querySelector(\'input[name="V_boiled"]\').value)\n      , V_tap = calculate(T_tap, T_brew, V_boiled)\n\n    document.querySelector(\'#V_tap\').innerHTML = \'\' + Math.round(V_tap * 1000) / 1000\n  }\n\n  refresh()\n  document.querySelector(\'input.water-temperature-tea\').onkeyup = refresh\n\n<\/script>\n</body>\n</html>\n',"/articles/2014-11-17-delegating-audio-processing-to-web-worker":'<!DOCTYPE html>\n<html xmlns="http://www.w3.org/1999/xhtml" lang="" xml:lang="">\n<head>\n  <meta charset="utf-8" />\n  <meta name="generator" content="pandoc" />\n  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />\n  <title>article</title>\n  <style>\n    code{white-space: pre-wrap;}\n    span.smallcaps{font-variant: small-caps;}\n    span.underline{text-decoration: underline;}\n    div.column{display: inline-block; vertical-align: top; width: 50%;}\n    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n    ul.task-list{list-style: none;}\n    pre > code.sourceCode { white-space: pre; position: relative; }\n    pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }\n    pre > code.sourceCode > span:empty { height: 1.2em; }\n    code.sourceCode > span { color: inherit; text-decoration: inherit; }\n    div.sourceCode { margin: 1em 0; }\n    pre.sourceCode { margin: 0; }\n    @media screen {\n    div.sourceCode { overflow: auto; }\n    }\n    @media print {\n    pre > code.sourceCode { white-space: pre-wrap; }\n    pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }\n    }\n    pre.numberSource code\n      { counter-reset: source-line 0; }\n    pre.numberSource code > span\n      { position: relative; left: -4em; counter-increment: source-line; }\n    pre.numberSource code > span > a:first-child::before\n      { content: counter(source-line);\n        position: relative; left: -1em; text-align: right; vertical-align: baseline;\n        border: none; display: inline-block;\n        -webkit-touch-callout: none; -webkit-user-select: none;\n        -khtml-user-select: none; -moz-user-select: none;\n        -ms-user-select: none; user-select: none;\n        padding: 0 4px; width: 4em;\n        background-color: #2a211c;\n        color: #bdae9d;\n      }\n    pre.numberSource { margin-left: 3em; border-left: 1px solid #bdae9d;  padding-left: 4px; }\n    div.sourceCode\n      { color: #bdae9d; background-color: #2a211c; }\n    @media screen {\n    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }\n    }\n    code span.al { color: #ffff00; } /* Alert */\n    code span.an { color: #0066ff; font-weight: bold; font-style: italic; } /* Annotation */\n    code span.at { } /* Attribute */\n    code span.bn { color: #44aa43; } /* BaseN */\n    code span.bu { } /* BuiltIn */\n    code span.cf { color: #43a8ed; font-weight: bold; } /* ControlFlow */\n    code span.ch { color: #049b0a; } /* Char */\n    code span.cn { } /* Constant */\n    code span.co { color: #0066ff; font-weight: bold; font-style: italic; } /* Comment */\n    code span.do { color: #0066ff; font-style: italic; } /* Documentation */\n    code span.dt { text-decoration: underline; } /* DataType */\n    code span.dv { color: #44aa43; } /* DecVal */\n    code span.er { color: #ffff00; font-weight: bold; } /* Error */\n    code span.ex { } /* Extension */\n    code span.fl { color: #44aa43; } /* Float */\n    code span.fu { color: #ff9358; font-weight: bold; } /* Function */\n    code span.im { } /* Import */\n    code span.in { color: #0066ff; font-weight: bold; font-style: italic; } /* Information */\n    code span.kw { color: #43a8ed; font-weight: bold; } /* Keyword */\n    code span.op { } /* Operator */\n    code span.pp { font-weight: bold; } /* Preprocessor */\n    code span.sc { color: #049b0a; } /* SpecialChar */\n    code span.ss { color: #049b0a; } /* SpecialString */\n    code span.st { color: #049b0a; } /* String */\n    code span.va { } /* Variable */\n    code span.vs { color: #049b0a; } /* VerbatimString */\n    code span.wa { color: #ffff00; font-weight: bold; } /* Warning */\n  </style>\n  \x3c!--[if lt IE 9]>\n    <script src="//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js"><\/script>\n  <![endif]--\x3e\n</head>\n<body>\n<p>Just published an implementation of PaulStretch in JavaScript which I made about a year ago. The <a href="https://github.com/sebpiq/paulstretch.js">repository is here</a> and in addition there is a demo <a href="http://sebpiq.github.io/paulstretch.js/examples/stretched-and-droned/dist/index.html">which allows you to create nice drones from SoundCloud tracks</a>. The following post is a more general tutorial on how to process audio live with web workers, and it uses <strong>paulstretch.js</strong> as an example.</p>\n\x3c!--more--\x3e\n<p><strong>paulstretch.js</strong> can be used in Node.js and in the browser. Unlike the original PaulStretch implementations, it is designed for allowing the user to change the stretch ratio at any time.</p>\n<p>Let\u2019s go over its API, in order to make the following example clearer.</p>\n<p>Note that in the following, <code>blockOut</code> and <code>blockIn</code> are just arrays representing channels data. For example a stereo block of 10 frames is represented by <code>[new Float32Array(10), new Float32Array(10)]</code>.</p>\n<div class="sourceCode" id="cb1"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb1-1"><a href="#cb1-1"></a><span class="co">// Creates a PaulStretch instance. Typical `winSize` is 4096.</span></span>\n<span id="cb1-2"><a href="#cb1-2"></a><span class="co">// The created instance has 2 queues. One &#39;write queue&#39; with raw input frames,</span></span>\n<span id="cb1-3"><a href="#cb1-3"></a><span class="co">// one &#39;read queue&#39; with processed frames.</span></span>\n<span id="cb1-4"><a href="#cb1-4"></a><span class="kw">var</span> paulstretch <span class="op">=</span> <span class="kw">new</span> PaulStretch(numberOfChannels<span class="op">,</span> initialStretchRatio<span class="op">,</span> winSize)</span>\n<span id="cb1-5"><a href="#cb1-5"></a></span>\n<span id="cb1-6"><a href="#cb1-6"></a><span class="co">// Writes a block to the &#39;write queue&#39;.</span></span>\n<span id="cb1-7"><a href="#cb1-7"></a>paulstretch<span class="op">.</span><span class="fu">write</span>(blockIn)</span>\n<span id="cb1-8"><a href="#cb1-8"></a></span>\n<span id="cb1-9"><a href="#cb1-9"></a><span class="co">// Processes the data from the &#39;write queue&#39; and add it to the &#39;read queue&#39;.</span></span>\n<span id="cb1-10"><a href="#cb1-10"></a><span class="co">// It also returns the number of frames that were processed.</span></span>\n<span id="cb1-11"><a href="#cb1-11"></a><span class="co">// If there is not enough data to process, 0 is returned.</span></span>\n<span id="cb1-12"><a href="#cb1-12"></a>paulstretch<span class="op">.</span><span class="fu">process</span>() </span>\n<span id="cb1-13"><a href="#cb1-13"></a></span>\n<span id="cb1-14"><a href="#cb1-14"></a><span class="co">// Reads the processed data from the &#39;read queue&#39; to `blockOut`.</span></span>\n<span id="cb1-15"><a href="#cb1-15"></a><span class="co">// The amount of frames read depends on the length of `blockOut`.</span></span>\n<span id="cb1-16"><a href="#cb1-16"></a><span class="co">// If there is not enough frames to fill `blockOut`, `null` is returned.</span></span>\n<span id="cb1-17"><a href="#cb1-17"></a>paulstretch<span class="op">.</span><span class="fu">read</span>(blockOut)</span>\n<span id="cb1-18"><a href="#cb1-18"></a></span>\n<span id="cb1-19"><a href="#cb1-19"></a><span class="co">// Returns the number of processed frames in the &#39;read queue&#39;.</span></span>\n<span id="cb1-20"><a href="#cb1-20"></a>paulstretch<span class="op">.</span><span class="fu">readQueueLength</span>()</span>\n<span id="cb1-21"><a href="#cb1-21"></a></span>\n<span id="cb1-22"><a href="#cb1-22"></a><span class="co">// Set the time stretch ratio. Note that frames in the `readQueue` won&#39;t be affected.</span></span>\n<span id="cb1-23"><a href="#cb1-23"></a>paulstretch<span class="op">.</span><span class="fu">setRatio</span>(newRatio)</span></code></pre></div>\n<h1 id="the-web-audio-api-code">The web audio API code</h1>\n<p>As all the processing will happen in a worker, the only thing we want from web audio API is to read incoming blocks of audio and send them for processing to our worker.</p>\n<p>So we create a <code>ScriptProcessorNode</code>, with an <code>onaudioprocess</code> method that :</p>\n<ol type="1">\n<li>reads incoming blocks of audio, writes them to a queue <code>blocksIn</code> which will be sent to the worker.</li>\n<li>plays back audio from another queue <code>blocksOut</code> which contains processed audio blocks received from the worker.</li>\n</ol>\n<div class="sourceCode" id="cb2"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb2-1"><a href="#cb2-1"></a><span class="kw">var</span> blocksIn <span class="op">=</span> []</span>\n<span id="cb2-2"><a href="#cb2-2"></a>  <span class="op">,</span> blocksOut <span class="op">=</span> []</span>\n<span id="cb2-3"><a href="#cb2-3"></a></span>\n<span id="cb2-4"><a href="#cb2-4"></a>paulstretchNode<span class="op">.</span><span class="at">onaudioprocess</span> <span class="op">=</span> <span class="kw">function</span>(<span class="bu">event</span>) {</span>\n<span id="cb2-5"><a href="#cb2-5"></a>  <span class="kw">var</span> ch<span class="op">,</span> block <span class="op">=</span> []</span>\n<span id="cb2-6"><a href="#cb2-6"></a></span>\n<span id="cb2-7"><a href="#cb2-7"></a>  <span class="cf">for</span> (ch <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> ch <span class="op">&lt;</span> numberOfChannels<span class="op">;</span> ch<span class="op">++</span>)</span>\n<span id="cb2-8"><a href="#cb2-8"></a>    block<span class="op">.</span><span class="fu">push</span>(<span class="bu">event</span><span class="op">.</span><span class="at">inputBuffer</span><span class="op">.</span><span class="fu">getChannelData</span>(ch))</span>\n<span id="cb2-9"><a href="#cb2-9"></a>  blocksIn<span class="op">.</span><span class="fu">push</span>(block)</span>\n<span id="cb2-10"><a href="#cb2-10"></a>  </span>\n<span id="cb2-11"><a href="#cb2-11"></a>  <span class="cf">if</span> (blocksOut<span class="op">.</span><span class="at">length</span>) {</span>\n<span id="cb2-12"><a href="#cb2-12"></a>    block <span class="op">=</span> blocksOut<span class="op">.</span><span class="fu">shift</span>()</span>\n<span id="cb2-13"><a href="#cb2-13"></a>    <span class="cf">for</span> (ch <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> ch <span class="op">&lt;</span> numberOfChannels<span class="op">;</span> ch<span class="op">++</span>)</span>\n<span id="cb2-14"><a href="#cb2-14"></a>      <span class="bu">event</span><span class="op">.</span><span class="at">outputBuffer</span><span class="op">.</span><span class="fu">getChannelData</span>(ch)<span class="op">.</span><span class="fu">set</span>(block[ch])</span>\n<span id="cb2-15"><a href="#cb2-15"></a>  }</span>\n<span id="cb2-16"><a href="#cb2-16"></a>}</span></code></pre></div>\n<h1 id="the-worker-file">The worker file</h1>\n<p>Here is a template of our worker file with a message handler for receiving commands from the main thread.</p>\n<div class="sourceCode" id="cb3"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb3-1"><a href="#cb3-1"></a>onmessage <span class="op">=</span> <span class="kw">function</span> (<span class="bu">event</span>) {</span>\n<span id="cb3-2"><a href="#cb3-2"></a>  <span class="cf">switch</span> ( <span class="bu">event</span><span class="op">.</span><span class="at">data</span><span class="op">.</span><span class="at">type</span> ) {</span>\n<span id="cb3-3"><a href="#cb3-3"></a>    <span class="cf">case</span> <span class="st">&#39;read&#39;</span><span class="op">:</span></span>\n<span id="cb3-4"><a href="#cb3-4"></a>      <span class="cf">break</span></span>\n<span id="cb3-5"><a href="#cb3-5"></a>    <span class="cf">case</span> <span class="st">&#39;write&#39;</span><span class="op">:</span></span>\n<span id="cb3-6"><a href="#cb3-6"></a>      <span class="cf">break</span></span>\n<span id="cb3-7"><a href="#cb3-7"></a>  }</span>\n<span id="cb3-8"><a href="#cb3-8"></a>}</span></code></pre></div>\n<p>In order to keep the audio responsive, and be able to change the stretch ratio live, we need to process audio only at the last moment. This will be handled in the <code>\'read\'</code> case.</p>\n<p>Writing is trivial \u2026 we just take the audio as it comes :</p>\n<div class="sourceCode" id="cb4"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb4-1"><a href="#cb4-1"></a>  <span class="cf">case</span> <span class="st">&#39;write&#39;</span><span class="op">:</span></span>\n<span id="cb4-2"><a href="#cb4-2"></a>    paulStretch<span class="op">.</span><span class="fu">write</span>(<span class="bu">event</span><span class="op">.</span><span class="at">data</span><span class="op">.</span><span class="at">data</span>)</span>\n<span id="cb4-3"><a href="#cb4-3"></a>    <span class="cf">break</span></span>\n<span id="cb4-4"><a href="#cb4-4"></a>  }</span></code></pre></div>\n<p>Reading is more tricky. We need to make sure that we have enough processed audio to meet the demand. and not starve the <code>ScriptProcessorNode</code>, which would result in ugly glitches of agony. For this, we will simply buffer the processed audio, making sure that we always have a batch of <code>batchSize</code> blocks ready to be sent. Of course, the bigger the buffer (i.e.\xa0the bigger batch size), the less likely you are to get glitches. Unfortunately, the bigger the buffer, the bigger the latency between a change of stretch ratio and an audible result.</p>\n<div class="sourceCode" id="cb5"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb5-1"><a href="#cb5-1"></a>  <span class="cf">case</span> <span class="st">&#39;read&#39;</span><span class="op">:</span></span>\n<span id="cb5-2"><a href="#cb5-2"></a>    <span class="kw">var</span> i</span>\n<span id="cb5-3"><a href="#cb5-3"></a></span>\n<span id="cb5-4"><a href="#cb5-4"></a>    <span class="co">// If there is at least `batchSize` blocks of audio ready to be sent in the &#39;read queue&#39;,</span></span>\n<span id="cb5-5"><a href="#cb5-5"></a>    <span class="co">// we send the whole batch block by block.</span></span>\n<span id="cb5-6"><a href="#cb5-6"></a>    <span class="cf">if</span> (<span class="bu">Math</span><span class="op">.</span><span class="fu">floor</span>(paulStretch<span class="op">.</span><span class="fu">readQueueLength</span>() <span class="op">/</span> blockSize) <span class="op">&gt;=</span> batchSize) {</span>\n<span id="cb5-7"><a href="#cb5-7"></a>      <span class="cf">for</span> (i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> batchSize<span class="op">;</span> i<span class="op">++</span>) paulStretch<span class="op">.</span><span class="fu">read</span>(blocksOut[i])</span>\n<span id="cb5-8"><a href="#cb5-8"></a>      postMessage({ <span class="dt">type</span><span class="op">:</span> <span class="st">&#39;read&#39;</span><span class="op">,</span> <span class="dt">data</span><span class="op">:</span> blocksOut })</span>\n<span id="cb5-9"><a href="#cb5-9"></a>    }</span>\n<span id="cb5-10"><a href="#cb5-10"></a> </span>\n<span id="cb5-11"><a href="#cb5-11"></a>    <span class="co">// Fill-up the &#39;read queue&#39; to at least `batchSize` blocks</span></span>\n<span id="cb5-12"><a href="#cb5-12"></a>    <span class="cf">while</span> ((paulStretch<span class="op">.</span><span class="fu">readQueueLength</span>() <span class="op">&lt;</span> (batchSize <span class="op">*</span> blockSize)) </span>\n<span id="cb5-13"><a href="#cb5-13"></a>      <span class="op">&amp;&amp;</span> (paulStretch<span class="op">.</span><span class="fu">process</span>() <span class="op">!==</span> <span class="dv">0</span>)) paulStretch<span class="op">.</span><span class="fu">readQueueLength</span>()</span>\n<span id="cb5-14"><a href="#cb5-14"></a></span>\n<span id="cb5-15"><a href="#cb5-15"></a>    <span class="cf">break</span></span></code></pre></div>\n<p>Complete worker code can be found <a href="https://github.com/sebpiq/paulstretch.js/blob/master/examples/simple/js/paulstretch-worker.js">here</a>.</p>\n<h1 id="communication-with-the-worker">Communication with the worker</h1>\n<p>Now that all the parts are there, we will need to wire them up.</p>\n<p>For this we will run in the main thread a function with <code>setInterval</code> that will periodically communicate with the worker : sending raw audio, and receiving processed audio.</p>\n<p>Once again, for raw audio there is no problem, as we will send the blocks as they comes \u2026 but for processed audio we will apply a similar technique as in the worker and use a buffer that should always contain at least <code>batchSize</code> blocks. Therefore, we check the state of our buffer <code>blocksOut</code> at each interval, and request new data from the worker only when the buffer runs low.</p>\n<div class="sourceCode" id="cb6"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb6-1"><a href="#cb6-1"></a><span class="pp">setInterval</span>(<span class="kw">function</span>() {</span>\n<span id="cb6-2"><a href="#cb6-2"></a>  <span class="cf">if</span> (blocksIn<span class="op">.</span><span class="at">length</span>)</span>\n<span id="cb6-3"><a href="#cb6-3"></a>    paulstretchWorker<span class="op">.</span><span class="fu">postMessage</span>({ <span class="dt">type</span><span class="op">:</span> <span class="st">&#39;write&#39;</span><span class="op">,</span> <span class="dt">data</span><span class="op">:</span> blocksIn<span class="op">.</span><span class="fu">shift</span>() })</span>\n<span id="cb6-4"><a href="#cb6-4"></a></span>\n<span id="cb6-5"><a href="#cb6-5"></a>  <span class="cf">if</span> (blocksOut<span class="op">.</span><span class="at">length</span> <span class="op">&lt;</span> batchSize) </span>\n<span id="cb6-6"><a href="#cb6-6"></a>    paulstretchWorker<span class="op">.</span><span class="fu">postMessage</span>({ <span class="dt">type</span><span class="op">:</span> <span class="st">&#39;read&#39;</span> })</span>\n<span id="cb6-7"><a href="#cb6-7"></a>}<span class="op">,</span> <span class="dv">100</span>)</span></code></pre></div>\n<p>That\u2019s all there is to it! With this simple technique, you can use in web audio API processes that are too heavy to run in the main thread.</p>\n<p>Let\u2019s recap :</p>\n<p><strong>In the main thread</strong></p>\n<div class="sourceCode" id="cb7"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb7-1"><a href="#cb7-1"></a></span>\n<span id="cb7-2"><a href="#cb7-2"></a><span class="kw">var</span> blocksIn <span class="op">=</span> []</span>\n<span id="cb7-3"><a href="#cb7-3"></a>  <span class="op">,</span> blocksOut <span class="op">=</span> []</span>\n<span id="cb7-4"><a href="#cb7-4"></a></span>\n<span id="cb7-5"><a href="#cb7-5"></a>paulstretchNode<span class="op">.</span><span class="at">onaudioprocess</span> <span class="op">=</span> <span class="kw">function</span>(<span class="bu">event</span>) {</span>\n<span id="cb7-6"><a href="#cb7-6"></a>  <span class="kw">var</span> ch<span class="op">,</span> block <span class="op">=</span> []</span>\n<span id="cb7-7"><a href="#cb7-7"></a></span>\n<span id="cb7-8"><a href="#cb7-8"></a>  <span class="cf">for</span> (ch <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> ch <span class="op">&lt;</span> numberOfChannels<span class="op">;</span> ch<span class="op">++</span>)</span>\n<span id="cb7-9"><a href="#cb7-9"></a>    block<span class="op">.</span><span class="fu">push</span>(<span class="bu">event</span><span class="op">.</span><span class="at">inputBuffer</span><span class="op">.</span><span class="fu">getChannelData</span>(ch))</span>\n<span id="cb7-10"><a href="#cb7-10"></a>  blocksIn<span class="op">.</span><span class="fu">push</span>(block)</span>\n<span id="cb7-11"><a href="#cb7-11"></a>  </span>\n<span id="cb7-12"><a href="#cb7-12"></a>  <span class="cf">if</span> (blocksOut<span class="op">.</span><span class="at">length</span>) {</span>\n<span id="cb7-13"><a href="#cb7-13"></a>    block <span class="op">=</span> blocksOut<span class="op">.</span><span class="fu">shift</span>()</span>\n<span id="cb7-14"><a href="#cb7-14"></a>    <span class="cf">for</span> (ch <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> ch <span class="op">&lt;</span> numberOfChannels<span class="op">;</span> ch<span class="op">++</span>)</span>\n<span id="cb7-15"><a href="#cb7-15"></a>      <span class="bu">event</span><span class="op">.</span><span class="at">outputBuffer</span><span class="op">.</span><span class="fu">getChannelData</span>(ch)<span class="op">.</span><span class="fu">set</span>(block[ch])</span>\n<span id="cb7-16"><a href="#cb7-16"></a>  }</span>\n<span id="cb7-17"><a href="#cb7-17"></a>}</span>\n<span id="cb7-18"><a href="#cb7-18"></a></span>\n<span id="cb7-19"><a href="#cb7-19"></a><span class="pp">setInterval</span>(<span class="kw">function</span>() {</span>\n<span id="cb7-20"><a href="#cb7-20"></a>  <span class="cf">if</span> (blocksIn<span class="op">.</span><span class="at">length</span>)</span>\n<span id="cb7-21"><a href="#cb7-21"></a>    paulstretchWorker<span class="op">.</span><span class="fu">postMessage</span>({ <span class="dt">type</span><span class="op">:</span> <span class="st">&#39;write&#39;</span><span class="op">,</span> <span class="dt">data</span><span class="op">:</span> blocksIn<span class="op">.</span><span class="fu">shift</span>() })</span>\n<span id="cb7-22"><a href="#cb7-22"></a></span>\n<span id="cb7-23"><a href="#cb7-23"></a>  <span class="cf">if</span> (blocksOut<span class="op">.</span><span class="at">length</span> <span class="op">&lt;</span> batchSize) </span>\n<span id="cb7-24"><a href="#cb7-24"></a>    paulstretchWorker<span class="op">.</span><span class="fu">postMessage</span>({ <span class="dt">type</span><span class="op">:</span> <span class="st">&#39;read&#39;</span> })</span>\n<span id="cb7-25"><a href="#cb7-25"></a>}<span class="op">,</span> <span class="dv">100</span>)</span></code></pre></div>\n<p><strong>In the web worker</strong></p>\n<div class="sourceCode" id="cb8"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb8-1"><a href="#cb8-1"></a>onmessage <span class="op">=</span> <span class="kw">function</span> (<span class="bu">event</span>) {</span>\n<span id="cb8-2"><a href="#cb8-2"></a>  <span class="cf">switch</span> ( <span class="bu">event</span><span class="op">.</span><span class="at">data</span><span class="op">.</span><span class="at">type</span> ) {</span>\n<span id="cb8-3"><a href="#cb8-3"></a>    <span class="cf">case</span> <span class="st">&#39;read&#39;</span><span class="op">:</span></span>\n<span id="cb8-4"><a href="#cb8-4"></a>      <span class="kw">var</span> i</span>\n<span id="cb8-5"><a href="#cb8-5"></a></span>\n<span id="cb8-6"><a href="#cb8-6"></a>      <span class="co">// Send audio from the buffer if there is at least `batchSize` blocks</span></span>\n<span id="cb8-7"><a href="#cb8-7"></a>      <span class="cf">if</span> (<span class="bu">Math</span><span class="op">.</span><span class="fu">floor</span>(paulStretch<span class="op">.</span><span class="fu">readQueueLength</span>() <span class="op">/</span> blockSize) <span class="op">&gt;=</span> batchSize) {</span>\n<span id="cb8-8"><a href="#cb8-8"></a>        <span class="cf">for</span> (i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> batchSize<span class="op">;</span> i<span class="op">++</span>) paulStretch<span class="op">.</span><span class="fu">read</span>(blocksOut[i])</span>\n<span id="cb8-9"><a href="#cb8-9"></a>        postMessage({ <span class="dt">type</span><span class="op">:</span> <span class="st">&#39;read&#39;</span><span class="op">,</span> <span class="dt">data</span><span class="op">:</span> blocksOut })</span>\n<span id="cb8-10"><a href="#cb8-10"></a>      }</span>\n<span id="cb8-11"><a href="#cb8-11"></a>   </span>\n<span id="cb8-12"><a href="#cb8-12"></a>      <span class="co">// Fill-up the buffers to at least `batchSize` blocks</span></span>\n<span id="cb8-13"><a href="#cb8-13"></a>      <span class="cf">while</span> ((paulStretch<span class="op">.</span><span class="fu">readQueueLength</span>() <span class="op">&lt;</span> (batchSize <span class="op">*</span> blockSize)) </span>\n<span id="cb8-14"><a href="#cb8-14"></a>        <span class="op">&amp;&amp;</span> (paulStretch<span class="op">.</span><span class="fu">process</span>() <span class="op">!==</span> <span class="dv">0</span>)) paulStretch<span class="op">.</span><span class="fu">readQueueLength</span>()</span>\n<span id="cb8-15"><a href="#cb8-15"></a>      <span class="cf">break</span></span>\n<span id="cb8-16"><a href="#cb8-16"></a></span>\n<span id="cb8-17"><a href="#cb8-17"></a>    <span class="cf">case</span> <span class="st">&#39;write&#39;</span><span class="op">:</span></span>\n<span id="cb8-18"><a href="#cb8-18"></a>      paulStretch<span class="op">.</span><span class="fu">write</span>(<span class="bu">event</span><span class="op">.</span><span class="at">data</span><span class="op">.</span><span class="at">data</span>)</span>\n<span id="cb8-19"><a href="#cb8-19"></a>      <span class="cf">break</span></span>\n<span id="cb8-20"><a href="#cb8-20"></a>    }</span>\n<span id="cb8-21"><a href="#cb8-21"></a>  }</span>\n<span id="cb8-22"><a href="#cb8-22"></a>}</span></code></pre></div>\n<p><a href="https://github.com/sebpiq/paulstretch.js/tree/master/examples/simple">The complete code of the example can be found here</a>.</p>\n</body>\n</html>\n',"/articles/2015-08-25-network-topologies-for-live-performances":'<!DOCTYPE html>\n<html xmlns="http://www.w3.org/1999/xhtml" lang="" xml:lang="">\n<head>\n  <meta charset="utf-8" />\n  <meta name="generator" content="pandoc" />\n  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />\n  <title>article</title>\n  <style>\n    code{white-space: pre-wrap;}\n    span.smallcaps{font-variant: small-caps;}\n    span.underline{text-decoration: underline;}\n    div.column{display: inline-block; vertical-align: top; width: 50%;}\n    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n    ul.task-list{list-style: none;}\n  </style>\n  \x3c!--[if lt IE 9]>\n    <script src="//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js"><\/script>\n  <![endif]--\x3e\n</head>\n<body>\n<p><a href="http://funktion.fm/projects/murmurate">Fields</a> and <a href="http://funktion.fm/projects/newweave">New weave</a> are two interactive performances which allow audience members to participate by using their mobile phone. They use a tool which I have released about one and a half years ago, and which is called <a href="http://github.com/sebpiq/rhizome">rhizome</a>.</p>\n<p>In this post, I will quickly introduce <strong>rhizome</strong>, and explain what kind of network setup, equipment and configuration I use for these live performances.</p>\n\x3c!--more--\x3e\n<h1 id="about-rhizome">About rhizome</h1>\n<p><a href="http://github.com/sebpiq/rhizome">rhizome</a> is a web server which allows to build participative performances by connecting audience\u2019s and performers\u2019 devices via <strong>OSC and websockets</strong>. It is packaged so that you should be able to install it and set-it up, even if you have no experience in programming. However, more advanced users can also configure everything, or program their own server from scratch by using rhizome base classes and functions (API not documented yet).</p>\n<p>rhizome is built with the following aspects in mind, critical for a live performance situation :</p>\n<ul>\n<li><strong>reliability</strong> : it shouldn\u2019t crash, and if it does it should be able to restore all the connections</li>\n<li><strong>speed</strong> : it should be optimized so that many messages can be sent</li>\n<li><strong>scalability</strong> : it should support 10 connections or 10000</li>\n<li><strong>inter-operability</strong> : it should be able to work with Pure Data, Max, Processing \u2026</li>\n</ul>\n<p>Making rhizome easy enough to use for non-programmers, while keeping it neat, flexible, fast, reliable, scalable \u2026 is not an easy task. And though there is still a lot of work, <a href="https://github.com/sebpiq/rhizome/issues">things to fix and things to implement</a>, it is slowly getting there. I am happy to see that a few people have used it successfully <a href="https://github.com/sebpiq/rhizome/wiki/Gallery">for their own performances</a>, and I hope more people will use it in the future, for the more it is used, the better it will become.</p>\n<p>Now, one recurrent question I get is,</p>\n<p><strong>\u201cHow do you setup a wireless network and what equipment do you use?\u201d</strong></p>\n<p>And so here are a few pointers \u2026</p>\n<h1 id="network-topology-and-equipment">Network topology and equipment</h1>\n<h2 id="small-performances-15-connections">Small performances &lt; 15 connections</h2>\n<p>For very small performances, you don\u2019t really need any fancy network equipment :</p>\n<p><img src="https://raw.githubusercontent.com/sebpiq/rhizome/master/images/network-diagram1.png" style="max-width:100%;width:25em;background-color:white;"/></p>\n<ul>\n<li><p><strong>WIFI router</strong> : can be any home WIFI router. Typically, those cost between 15 and 50 euros. personnally I have this cheap <a href="http://www.tp-link.fi/products/details/cat-9_TL-WR841ND.html">TP-link router</a> which worked alright for performances with 10-12 connections (more than that it starts to choke a bit). I just happened to have this one at home for my own WIFI network, but any cheap home router will do.</p></li>\n<li><p><strong>rhizome server</strong> : is basically a computer that runs rhizome. I usually use my own Ubuntu laptop, which I optimize for the occasion (I\u2019ll talk about deployment in a next blog post). You can use any computer as long as you can install <strong>node.js</strong> on it. I have even performed with rhizome running from a Raspberry Pi (quite slow).</p></li>\n</ul>\n<h2 id="the-apple-airport-express-option">The Apple Airport Express option</h2>\n<p>This is an option that is worth mentioning. The <a href="https://www.apple.com/airport-extreme/">Apple Airport Extreme</a> supports up to 50 wireless connections. So if that is enough for your use, you should consider using this (overpriced but quite powerful router) instead of the more complex solution I will detail below.</p>\n<h2 id="middle-sized-performances-250-connections">Middle-sized performances &lt; 250 connections</h2>\n<p>A home WIFI router is typically a combination of a router, a switch and a WIFI access point, all integrated into a single device. If you expect up to 250 connections, you will need a network that can scale. For this you have to buy and install all router, switch and access points separately.</p>\n<p>This is the setup I have been using :</p>\n<p><img src="https://raw.githubusercontent.com/sebpiq/rhizome/master/images/network-diagram2.png" style="max-width:100%;width:30em;background-color:white;"/></p>\n<ul>\n<li><p><strong>Router</strong> : this is a <strong>wired</strong> router. Its role is to attribute IP addresses to devices on the network and route messages from one device to another. The router is the reason for the 250 limit. On a single network, there is only 255 IP addresses available. Some are reserved, and you will need a couple more for the rhizome server, access points, \u2026 which brings us down to 250, probably less in most cases.</p></li>\n<li><p><strong>Switch</strong> : the role of a switch is to connect several devices to the same network. It is <strong>a bit</strong> like a multi-socket but for ethernet cables \u2026</p></li>\n<li><p><strong>WIFI access point</strong> : the name is pretty self-explanatory. These devices provide wireless access to phones, tablets, computers \u2026 Check carefully before buying those because they typically support only a small number of connections. Therefore you will most likely need to buy several of them. The access points I use for example support up to 50 people. Therefore to support 250 people, I would need 5 of them. Also, make sure that you have enough space on your switch!!!</p></li>\n</ul>\n<p>Such network equipment is usually quite expensive and can be complicated to configure. Not every router is compatible with every access point. I recommend the brand <strong>Ubiquiti</strong> which has very affordable products and is very easy to set-up. I\u2019ve used <a href="https://www.ubnt.com/edgemax/edgerouter-lite/">this router</a> from them, with several of <a href="https://www.ubnt.com/unifi/unifi-ap/">these access points</a>.</p>\n<h2 id="i-am-planning-to-perform-in-a-stadium">250++, I am planning to perform in a stadium!</h2>\n<p>Rhizome is not ready for that. The bottleneck here is how many concurrent connections the websocket server can handle. Answers to that question vary wildly (from 100 to 1 million!), it depends on your computer, your OS, on how many messages you send, if you send big files, etc, etc \u2026</p>\n<p>Anyways, in order to scale up, you should be able to run several rhizome servers, and have them communicate with each other in order to share messages and reach all the connections. This is something that is planned, but probably not before version 0.9.0.</p>\n<h1 id="configuring-tips">Configuring tips</h1>\n<p>Ok \u2026 now you have all the gear, how do you configure it? Well \u2026 that completely depends on what brand it is, but here are a few general advices and things to keep in mind.</p>\n<h2 id="accessing-the-configuration-interface-of-your-router-wired-or-wireless">Accessing the configuration interface of your router (wired or wireless)</h2>\n<p>Most routers can be configured via a web interface. You just need to connect a computer to that router (via cable or wireless), figure out what is the IP of the router (<code>XXX.YYY.ZZZ.1</code>, where <code>XXX</code>, <code>YYY</code> and <code>ZZZ</code> are the 3 first numbers of your computer\u2019s IP address), open a web browser and go to that router\u2019s IP address. The login and password for the configuration interface are usually given in the user guide of the router.</p>\n<h2 id="attributing-fixed-ip-addresses-to-the-rhizome-server-and-access-points">Attributing fixed IP addresses to the rhizome server and access points</h2>\n<p>When a device connects, your router\u2019s DHCP server will attribute a free IP address to that device. However, you might want the rhizome server and some other key devices - like your access points - to always get the same IP address from the DHCP server. This can usually be configured via your router\u2019s configuration interface. Look for the DHCP section, then look for something like \u201cstatic IP mapping\u201d.</p>\n<h2 id="limiting-the-number-of-connections">Limiting the number of connections</h2>\n<p>If for any reason you want to limit the number of people that can connect to your network, you can configure the DHCP server of your router to attribute IP addresses only within a certain range. For example if you want to limit to 30 connections, you can have the DHCP attribute only IPs within <code>XXX.YYY.ZZZ.100</code> and <code>XXX.YYY.ZZZ.130</code>. If you do this though, make sure that you have a short DHCP lease time. Otherwise if somebody connects and then leaves, its IP address will be blocked.</p>\n<h2 id="wifi-network-protection">WIFI network protection</h2>\n<p>In most cases, it is fine to not have a password on your WIFI network. It is faster for people to connect. However, if you play in a venue will a lot of people passing near-by (for example a festival or a public space), phones from passerbys might automatically connect to your network, taking space for nothing. In that case it might be a good idea to protect the network with a simple password, so that only participants can connect.</p>\n<p><a href="http://twitter.com/sebpiq/status/636197123587969024">comments</a></p>\n</body>\n</html>\n',"/articles/2016-01-15-audio-glitches-with-linux-terminal":'<!DOCTYPE html>\n<html xmlns="http://www.w3.org/1999/xhtml" lang="" xml:lang="">\n<head>\n  <meta charset="utf-8" />\n  <meta name="generator" content="pandoc" />\n  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />\n  <title>article</title>\n  <style>\n    code{white-space: pre-wrap;}\n    span.smallcaps{font-variant: small-caps;}\n    span.underline{text-decoration: underline;}\n    div.column{display: inline-block; vertical-align: top; width: 50%;}\n    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n    ul.task-list{list-style: none;}\n    pre > code.sourceCode { white-space: pre; position: relative; }\n    pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }\n    pre > code.sourceCode > span:empty { height: 1.2em; }\n    code.sourceCode > span { color: inherit; text-decoration: inherit; }\n    div.sourceCode { margin: 1em 0; }\n    pre.sourceCode { margin: 0; }\n    @media screen {\n    div.sourceCode { overflow: auto; }\n    }\n    @media print {\n    pre > code.sourceCode { white-space: pre-wrap; }\n    pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }\n    }\n    pre.numberSource code\n      { counter-reset: source-line 0; }\n    pre.numberSource code > span\n      { position: relative; left: -4em; counter-increment: source-line; }\n    pre.numberSource code > span > a:first-child::before\n      { content: counter(source-line);\n        position: relative; left: -1em; text-align: right; vertical-align: baseline;\n        border: none; display: inline-block;\n        -webkit-touch-callout: none; -webkit-user-select: none;\n        -khtml-user-select: none; -moz-user-select: none;\n        -ms-user-select: none; user-select: none;\n        padding: 0 4px; width: 4em;\n        background-color: #2a211c;\n        color: #bdae9d;\n      }\n    pre.numberSource { margin-left: 3em; border-left: 1px solid #bdae9d;  padding-left: 4px; }\n    div.sourceCode\n      { color: #bdae9d; background-color: #2a211c; }\n    @media screen {\n    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }\n    }\n    code span.al { color: #ffff00; } /* Alert */\n    code span.an { color: #0066ff; font-weight: bold; font-style: italic; } /* Annotation */\n    code span.at { } /* Attribute */\n    code span.bn { color: #44aa43; } /* BaseN */\n    code span.bu { } /* BuiltIn */\n    code span.cf { color: #43a8ed; font-weight: bold; } /* ControlFlow */\n    code span.ch { color: #049b0a; } /* Char */\n    code span.cn { } /* Constant */\n    code span.co { color: #0066ff; font-weight: bold; font-style: italic; } /* Comment */\n    code span.do { color: #0066ff; font-style: italic; } /* Documentation */\n    code span.dt { text-decoration: underline; } /* DataType */\n    code span.dv { color: #44aa43; } /* DecVal */\n    code span.er { color: #ffff00; font-weight: bold; } /* Error */\n    code span.ex { } /* Extension */\n    code span.fl { color: #44aa43; } /* Float */\n    code span.fu { color: #ff9358; font-weight: bold; } /* Function */\n    code span.im { } /* Import */\n    code span.in { color: #0066ff; font-weight: bold; font-style: italic; } /* Information */\n    code span.kw { color: #43a8ed; font-weight: bold; } /* Keyword */\n    code span.op { } /* Operator */\n    code span.pp { font-weight: bold; } /* Preprocessor */\n    code span.sc { color: #049b0a; } /* SpecialChar */\n    code span.ss { color: #049b0a; } /* SpecialString */\n    code span.st { color: #049b0a; } /* String */\n    code span.va { } /* Variable */\n    code span.vs { color: #049b0a; } /* VerbatimString */\n    code span.wa { color: #ffff00; font-weight: bold; } /* Warning */\n  </style>\n  \x3c!--[if lt IE 9]>\n    <script src="//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js"><\/script>\n  <![endif]--\x3e\n</head>\n<body>\n<p>Here is an old hack with a terminal to listen to the guts of your computer.</p>\n<p>Before starting, here are a couple of tracks by <a href="https://bitsnibblesbytes.wordpress.com/">Stephen Stamper</a>, which were partly produced with this technique :</p>\n<iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/34843548&amp;color=0066cc&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false">\n</iframe>\n<iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/90038560&amp;color=0066cc&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false">\n</iframe>\n<p><code>aplay</code> is a great tool available on most linux distributions which allows you to read raw data, and interpret it as audio. You just give it the data source, tell it how to interpret it (sample rate, sample format, number of channels) and it will play it back.</p>\n<p><strong>note1</strong> : on OSX you can achieve the same results with <a href="http://sox.sourceforge.net/">sox</a>.</p>\n<p><strong>note2</strong> : be careful with the volume of your speakers or headphones. All these audio examples are quite loud.</p>\n<p>Let\u2019s start by sending <code>aplay</code> an mp3 file to see how it sounds :</p>\n<p><img src="/articles/2016-01-15-audio-glitches-with-linux-terminal/images/wf1.svg" width="100%" height="auto" /><audio controls="" style="width:100%;"> <source src="/articles/2016-01-15-audio-glitches-with-linux-terminal/audio/1.ogg" type="audio/ogg"> <source src="/articles/2016-01-15-audio-glitches-with-linux-terminal/audio/1.mp3" type="audio/mp3"> </audio></p>\n<div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1"></a><span class="fu">cat</span> ~/Music/Cameosis/03-Cameo-PleaseYou.mp3 <span class="kw">|</span> <span class="fu">aplay</span> -r 8000 -c2</span></code></pre></div>\n<p>Here you can see the basic technique. <code>cat</code> will just read a file, and send it to its output, then you use the pipe character <strong>|</strong> to send that output to <code>aplay</code> which will interepret the bytes as audio and play that audio back. <code>-r 8000</code> means that we interpret the sound with sample rate of <em>8000hz</em>, <code>-c2</code> means stereo.</p>\n<p>I don\u2019t have a mac to test, but according to Stephen, on OSX the equivalent command would be :</p>\n<div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1"></a><span class="fu">cat</span> ~/Music/Cameosis/03-Cameo-PleaseYou.mp3 <span class="kw">|</span> <span class="fu">sox</span> -q -t raw -r 8000 -b 8 -e unsigned-integer - -t coreaudio vol 0.5</span></code></pre></div>\n<p>With this particular file, as with most files, the result is not very exciting \u2026 mostly white noise. This is because the raw data in a mp3 file is not periodical. There is however a lot of files in your computer that have a repetitive structure, and can make very interesting sounds. For example :</p>\n<p><img src="/articles/2016-01-15-audio-glitches-with-linux-terminal/images/wf2.svg" width="100%" height="auto" /><audio controls="" style="width:100%;"> <source src="/articles/2016-01-15-audio-glitches-with-linux-terminal/audio/2.ogg" type="audio/ogg"> <source src="/articles/2016-01-15-audio-glitches-with-linux-terminal/audio/2.mp3" type="audio/mp3"> </audio></p>\n<div class="sourceCode" id="cb3"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1"></a><span class="fu">sudo</span> cat /var/log/mongodb/mongodb.log <span class="kw">|</span> <span class="fu">aplay</span> -c2 -f MU_LAW</span></code></pre></div>\n<p><img src="/articles/2016-01-15-audio-glitches-with-linux-terminal/images/wf3.svg" width="100%" height="auto" /><audio controls="" style="width:100%;"> <source src="/articles/2016-01-15-audio-glitches-with-linux-terminal/audio/3.ogg" type="audio/ogg"> <source src="/articles/2016-01-15-audio-glitches-with-linux-terminal/audio/3.mp3" type="audio/mp3"> </audio></p>\n<div class="sourceCode" id="cb4"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb4-1"><a href="#cb4-1"></a><span class="fu">sudo</span> cat /var/log/mongodb/mongodb.log <span class="kw">|</span> <span class="fu">aplay</span> -c2 -r 4000 -f MU_LAW</span></code></pre></div>\n<p><img src="/articles/2016-01-15-audio-glitches-with-linux-terminal/images/wf4.svg" width="100%" height="auto" /><audio controls="" style="width:100%;"> <source src="/articles/2016-01-15-audio-glitches-with-linux-terminal/audio/4.ogg" type="audio/ogg"> <source src="/articles/2016-01-15-audio-glitches-with-linux-terminal/audio/4.mp3" type="audio/mp3"> </audio></p>\n<div class="sourceCode" id="cb5"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb5-1"><a href="#cb5-1"></a><span class="fu">sudo</span> cat /var/lib/mongodb/overwhelmed.0 <span class="kw">|</span> <span class="fu">aplay</span> -c2 -f MU_LAW</span></code></pre></div>\n<p><code>-f MU_LAW</code> here specifies the format of the sound. There is several different formats you can use, and choosing a different format will have a big impact on the sound. Available formats are listed in <code>aplay</code> documentation (which you can read by typing <code>man aplay</code>).</p>\n<p>Above I used a database as input, and log files. These all have a periodical structure, and you can hear it reflected in the sounds generated.</p>\n<p>You can also use live data as input to <code>aplay</code>. For example devices from your system :</p>\n<p><img src="/articles/2016-01-15-audio-glitches-with-linux-terminal/images/wf5.svg" width="100%" height="auto" /><audio controls="" style="width:100%;"> <source src="/articles/2016-01-15-audio-glitches-with-linux-terminal/audio/5.ogg" type="audio/ogg"> <source src="/articles/2016-01-15-audio-glitches-with-linux-terminal/audio/5.mp3" type="audio/mp3"> </audio></p>\n<pre><code>sudo cat /dev/vga_arbiter | aplay -r 2000 -c2 -f MU_LAW</code></pre>\n<p>The result here is quite boring as the data is not changing. However we can get more interesting sounds with data from <code>tcpdump</code> - which captures the traffic from your network connection :</p>\n<p><img src="/articles/2016-01-15-audio-glitches-with-linux-terminal/images/wf6.svg" width="100%" height="auto" /><audio controls="" style="width:100%;"> <source src="/articles/2016-01-15-audio-glitches-with-linux-terminal/audio/6.ogg" type="audio/ogg"> <source src="/articles/2016-01-15-audio-glitches-with-linux-terminal/audio/6.mp3" type="audio/mp3"> </audio></p>\n<pre><code>sudo tcpdump -vvv -i wlan0 | aplay -c2 -r 2000 -f FLOAT_LE</code></pre>\n<p>And finally - one that I quite like - you can listen to your webcam by using a software called <code>ffmpeg</code> to capture input from the cam and piping it to <code>aplay</code> as we did before. The sonic results are surprising deep and complex, though the sound doesn\u2019t really change :</p>\n<p><img src="/articles/2016-01-15-audio-glitches-with-linux-terminal/images/wf7.svg" width="100%" height="auto" /><audio controls="" style="width:100%;"> <source src="/articles/2016-01-15-audio-glitches-with-linux-terminal/audio/7.ogg" type="audio/ogg"> <source src="/articles/2016-01-15-audio-glitches-with-linux-terminal/audio/7.mp3" type="audio/mp3"> </audio></p>\n<pre><code>ffmpeg -f v4l2 -i /dev/video0 -vf scale=100:100 -f rawvideo pipe: | aplay -r 2000 -c2</code></pre>\n<p><img src="/articles/2016-01-15-audio-glitches-with-linux-terminal/images/wf8.svg" width="100%" height="auto" /><audio controls="" style="width:100%;"> <source src="/articles/2016-01-15-audio-glitches-with-linux-terminal/audio/8.ogg" type="audio/ogg"> <source src="/articles/2016-01-15-audio-glitches-with-linux-terminal/audio/8.mp3" type="audio/mp3"> </audio></p>\n<pre><code>ffmpeg -f v4l2 -i /dev/video0 -vf scale=6000:6000 -f rawvideo pipe: | aplay -r 2000 -c2</code></pre>\n<p>So yes \u2026 you can try to pipe <strong>|</strong> pretty much anything to your <code>aplay</code> \u2026 hours of procrastination lie ahead.</p>\n<p>And if nothing of these work for you, you can always run this command in your terminal to get some colorfull glitches :</p>\n<div class="sourceCode" id="cb10"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb10-1"><a href="#cb10-1"></a><span class="bu">echo</span> -e <span class="st">&quot;#coding=utf8\\nimport sys,random as r;c=0;p=&#39; &#39;*6\\nwhile 1:p,c=(&#39; &#39;*r.randint(3,200),r.randint(20,99)) if r.random()&gt;0.999 else (p,c);sys.stdout.write(&#39;\\033[%sm&#39;%c+(&#39;\u259a&#39;*15 if r.random()&gt;0.995 else &#39;\u259a&#39;*16)+p)&quot;</span> <span class="kw">|</span> <span class="ex">python</span></span></code></pre></div>\n</body>\n</html>\n',"/articles/2017-02-23-using-web-audio-api-in-production":'<!DOCTYPE html>\n<html xmlns="http://www.w3.org/1999/xhtml" lang="" xml:lang="">\n<head>\n  <meta charset="utf-8" />\n  <meta name="generator" content="pandoc" />\n  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />\n  <title>article</title>\n  <style>\n    code{white-space: pre-wrap;}\n    span.smallcaps{font-variant: small-caps;}\n    span.underline{text-decoration: underline;}\n    div.column{display: inline-block; vertical-align: top; width: 50%;}\n    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n    ul.task-list{list-style: none;}\n    pre > code.sourceCode { white-space: pre; position: relative; }\n    pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }\n    pre > code.sourceCode > span:empty { height: 1.2em; }\n    code.sourceCode > span { color: inherit; text-decoration: inherit; }\n    div.sourceCode { margin: 1em 0; }\n    pre.sourceCode { margin: 0; }\n    @media screen {\n    div.sourceCode { overflow: auto; }\n    }\n    @media print {\n    pre > code.sourceCode { white-space: pre-wrap; }\n    pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }\n    }\n    pre.numberSource code\n      { counter-reset: source-line 0; }\n    pre.numberSource code > span\n      { position: relative; left: -4em; counter-increment: source-line; }\n    pre.numberSource code > span > a:first-child::before\n      { content: counter(source-line);\n        position: relative; left: -1em; text-align: right; vertical-align: baseline;\n        border: none; display: inline-block;\n        -webkit-touch-callout: none; -webkit-user-select: none;\n        -khtml-user-select: none; -moz-user-select: none;\n        -ms-user-select: none; user-select: none;\n        padding: 0 4px; width: 4em;\n        background-color: #2a211c;\n        color: #bdae9d;\n      }\n    pre.numberSource { margin-left: 3em; border-left: 1px solid #bdae9d;  padding-left: 4px; }\n    div.sourceCode\n      { color: #bdae9d; background-color: #2a211c; }\n    @media screen {\n    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }\n    }\n    code span.al { color: #ffff00; } /* Alert */\n    code span.an { color: #0066ff; font-weight: bold; font-style: italic; } /* Annotation */\n    code span.at { } /* Attribute */\n    code span.bn { color: #44aa43; } /* BaseN */\n    code span.bu { } /* BuiltIn */\n    code span.cf { color: #43a8ed; font-weight: bold; } /* ControlFlow */\n    code span.ch { color: #049b0a; } /* Char */\n    code span.cn { } /* Constant */\n    code span.co { color: #0066ff; font-weight: bold; font-style: italic; } /* Comment */\n    code span.do { color: #0066ff; font-style: italic; } /* Documentation */\n    code span.dt { text-decoration: underline; } /* DataType */\n    code span.dv { color: #44aa43; } /* DecVal */\n    code span.er { color: #ffff00; font-weight: bold; } /* Error */\n    code span.ex { } /* Extension */\n    code span.fl { color: #44aa43; } /* Float */\n    code span.fu { color: #ff9358; font-weight: bold; } /* Function */\n    code span.im { } /* Import */\n    code span.in { color: #0066ff; font-weight: bold; font-style: italic; } /* Information */\n    code span.kw { color: #43a8ed; font-weight: bold; } /* Keyword */\n    code span.op { } /* Operator */\n    code span.pp { font-weight: bold; } /* Preprocessor */\n    code span.sc { color: #049b0a; } /* SpecialChar */\n    code span.ss { color: #049b0a; } /* SpecialString */\n    code span.st { color: #049b0a; } /* String */\n    code span.va { } /* Variable */\n    code span.vs { color: #049b0a; } /* VerbatimString */\n    code span.wa { color: #ffff00; font-weight: bold; } /* Warning */\n  </style>\n  \x3c!--[if lt IE 9]>\n    <script src="//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js"><\/script>\n  <![endif]--\x3e\n</head>\n<body>\n<p><a href="https://webaudio.github.io/web-audio-api/">Web Audio API</a> allows to synthesize sound in the web browser with JavaScript. However, as with anything on the web, it can be very challenging to write code that works on all browsers, mobile and desktop. Web Audio API is no exception and here is a little checklist of things to know \u2026</p>\n<h1 id="normalizing-the-api">Normalizing the API</h1>\n<p>Web Audio API is a moving target. As of February 2017, the API, method names, functionalities have changed many times and are still not stable. Also, on webkit, the <code>AudioContext</code> object, entry point to Web Audio API, is still prefixed and called <code>webkitAudioContext</code>. A simple way to normalize all the names is to use Chris Wilson\u2019s <a href="https://github.com/cwilso/AudioContext-MonkeyPatch">AudioContext-MonkeyPatch</a>. It is a small script that monkey-patches the functions of Web Audio API in the calling browser and makes sure that names comply with the latest version of the specification, so you don\u2019t need to think about that when writing your code.</p>\n<h1 id="audio-formats-supported">Audio formats supported</h1>\n<p>If you want to use the Web Audio API, chance is you will want to load some sound files. Problem is, different browsers on different platforms support different audio formats. However if you encode your sound in both <strong>mp3</strong> and <strong>ogg</strong> (and <strong>wav</strong> as a nearly universal fallback), you can cover all the browsers supporting Web Audio API. Firefox supports ogg but not always mp3 (depending on the codecs installed on the user\u2019s system), Safari mp3 but not ogg, Chrome supports all, etc \u2026 Your app must therefore load a different file depending on what formats the current browser supports. For that, I recommend to use <a href="https://github.com/sebpiq/web-audio-boilerplate">web-audio-boilerplate</a>, a small library I wrote :</p>\n<div class="sourceCode" id="cb1"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb1-1"><a href="#cb1-1"></a><span class="dt">&lt;!DOCTYPE </span>html<span class="dt">&gt;</span></span>\n<span id="cb1-2"><a href="#cb1-2"></a><span class="kw">&lt;html&gt;</span></span>\n<span id="cb1-3"><a href="#cb1-3"></a><span class="kw">&lt;head&gt;</span></span>\n<span id="cb1-4"><a href="#cb1-4"></a>  <span class="kw">&lt;script</span><span class="ot"> type=</span><span class="st">&quot;text/javascript&quot;</span><span class="ot"> src=</span><span class="st">&quot;https://sebpiq.github.io/web-audio-boilerplate/dist/web-audio-boilerplate-min.js&quot;</span><span class="kw">&gt;&lt;/script&gt;</span></span>\n<span id="cb1-5"><a href="#cb1-5"></a>  <span class="kw">&lt;script</span><span class="ot"> type=</span><span class="st">&quot;text/javascript&quot;</span><span class="kw">&gt;</span></span>\n<span id="cb1-6"><a href="#cb1-6"></a>    webAudioBoilerplate<span class="op">.</span><span class="fu">getSupportedFormats</span>(<span class="kw">new</span> <span class="bu">AudioContext</span><span class="op">,</span> <span class="kw">function</span>(err<span class="op">,</span> formats) {</span>\n<span id="cb1-7"><a href="#cb1-7"></a>      <span class="cf">if</span> (formats<span class="op">.</span><span class="at">ogg</span>)</span>\n<span id="cb1-8"><a href="#cb1-8"></a>        loadOggFile()</span>\n<span id="cb1-9"><a href="#cb1-9"></a>      <span class="cf">else</span> <span class="cf">if</span> (formats<span class="op">.</span><span class="at">mp3</span>)</span>\n<span id="cb1-10"><a href="#cb1-10"></a>        loadMp3File()</span>\n<span id="cb1-11"><a href="#cb1-11"></a>      <span class="cf">else</span> <span class="cf">if</span> (formats<span class="op">.</span><span class="at">wav</span>)</span>\n<span id="cb1-12"><a href="#cb1-12"></a>        loadWavFile()</span>\n<span id="cb1-13"><a href="#cb1-13"></a>      <span class="cf">else</span></span>\n<span id="cb1-14"><a href="#cb1-14"></a>        <span class="bu">console</span><span class="op">.</span><span class="fu">error</span>(<span class="st">&#39;no format is supported&#39;</span>)</span>\n<span id="cb1-15"><a href="#cb1-15"></a>    })</span>\n<span id="cb1-16"><a href="#cb1-16"></a>  <span class="kw">&lt;/script&gt;</span></span>\n<span id="cb1-17"><a href="#cb1-17"></a><span class="kw">&lt;/head&gt;</span></span>\n<span id="cb1-18"><a href="#cb1-18"></a><span class="kw">&lt;/html&gt;</span></span></code></pre></div>\n<p><strong>note</strong> : note that for convenience, the built version of <strong>web-audio-boilerplate</strong> also includes the <strong>AudioContextMonkeyPatch.js</strong> mentioned above \u2026</p>\n<p><strong>note2</strong> : you can also encode to other formats tested by <strong>web-audio-boilerplate</strong>. However, be careful as some encoders (mp3, aac, \u2026) sometimes add silence at the beginning or end of the file, which will cause a glitch when looping your audio.</p>\n<h1 id="ios-sounds-need-to-be-triggered-from-an-explicit-user-action">iOS \u201csounds need to be triggered from an explicit user action\u201d</h1>\n<p>On iOS, <code>AudioContext</code> instances are <a href="https://developer.apple.com/library/content/documentation/AudioVideo/Conceptual/Using_HTML5_Audio_Video/PlayingandSynthesizingSounds/PlayingandSynthesizingSounds.html">created muted</a>. The only place you can unmute an instance of <code>AudioContext</code> and make sound with Web Audio API is in the callback of a user action. This means that on iOS, your audio application must have some sort of \u201cstart\u201d button. Before <strong>iOS 8</strong>, listening to <code>click</code> on that button would work, but with <strong>iOS 9</strong> and later, we need to listen for a <code>touch</code> event. So, if you create your <code>AudioContext</code> directly in the handler of a <code>touch</code> event everything will work fine. Again, you can use <a href="https://github.com/sebpiq/web-audio-boilerplate">web-audio-boilerplate</a> for a cross-browser start button for your web audio app :</p>\n<div class="sourceCode" id="cb2"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb2-1"><a href="#cb2-1"></a><span class="dt">&lt;!DOCTYPE </span>html<span class="dt">&gt;</span></span>\n<span id="cb2-2"><a href="#cb2-2"></a><span class="kw">&lt;html&gt;</span></span>\n<span id="cb2-3"><a href="#cb2-3"></a><span class="kw">&lt;head&gt;</span></span>\n<span id="cb2-4"><a href="#cb2-4"></a>  <span class="kw">&lt;script</span><span class="ot"> type=</span><span class="st">&quot;text/javascript&quot;</span><span class="ot"> src=</span><span class="st">&quot;https://sebpiq.github.io/web-audio-boilerplate/dist/web-audio-boilerplate-min.js&quot;</span><span class="kw">&gt;&lt;/script&gt;</span></span>\n<span id="cb2-5"><a href="#cb2-5"></a><span class="kw">&lt;/head&gt;</span></span>\n<span id="cb2-6"><a href="#cb2-6"></a><span class="kw">&lt;body&gt;</span></span>\n<span id="cb2-7"><a href="#cb2-7"></a>  <span class="kw">&lt;button</span><span class="ot"> id=</span><span class="st">&quot;startButton&quot;</span><span class="kw">&gt;</span>START<span class="kw">&lt;/button&gt;</span></span>\n<span id="cb2-8"><a href="#cb2-8"></a>  <span class="kw">&lt;script</span><span class="ot"> type=</span><span class="st">&quot;text/javascript&quot;</span><span class="kw">&gt;</span></span>\n<span id="cb2-9"><a href="#cb2-9"></a>    <span class="kw">var</span> startButton <span class="op">=</span> <span class="bu">document</span><span class="op">.</span><span class="fu">getElementById</span>(<span class="st">&#39;startButton&#39;</span>)</span>\n<span id="cb2-10"><a href="#cb2-10"></a>    webAudioBoilerplate<span class="op">.</span><span class="fu">getAudioContextOnClick</span>(startButton<span class="op">,</span> <span class="kw">function</span>(err<span class="op">,</span> audioContext) {</span>\n<span id="cb2-11"><a href="#cb2-11"></a>      <span class="co">// `audioContext` is an instance of `AudioContext` that is unmuted!</span></span>\n<span id="cb2-12"><a href="#cb2-12"></a>      playSoundWith(audioContext)</span>\n<span id="cb2-13"><a href="#cb2-13"></a>    })</span>\n<span id="cb2-14"><a href="#cb2-14"></a>  <span class="kw">&lt;/script&gt;</span></span>\n<span id="cb2-15"><a href="#cb2-15"></a><span class="kw">&lt;/body&gt;</span></span>\n<span id="cb2-16"><a href="#cb2-16"></a><span class="kw">&lt;/html&gt;</span></span></code></pre></div>\n<p><strong>note</strong> : if you implement this technique yourself form scratch, be careful of creating your AudioContext <strong>directly</strong> in the event handler, and not in a callback within that event handler \u2026</p>\n<p><strong>note2</strong> : There are other methods fo unmuting audio on iOS. They all require a \u201cstart\u201d button. For example creating a silent node to kickstart a previously created AudioContext, etc \u2026 but the method describe above is the simplest in my opinion.</p>\n<h1 id="a-cross-browser-sound-player">A cross-browser sound player</h1>\n<p>To summarize all of this, here is a full, working, <a href="/audio/web-audio-in-production/looper.html">cross-browser app that just loops a sound</a>.</p>\n<h1 id="debugging-tips">Debugging tips</h1>\n<p>A couple of silly errors that I have made countless times :</p>\n<ul>\n<li>If testing on iOS and you have no sound \u2026 check that your <strong>mute switch</strong> is off!</li>\n<li>On any device \u2026 also check that your volume is not at zero!</li>\n</ul>\n<h1 id="despite-all-this">Despite all this \u2026</h1>\n<p>You <strong>WILL</strong> suffer developping with Web Audio API. There are a lot of inconsistencies between browsers. Functionalities not being implemented, etc \u2026 Also, Web Audio API not being a priority, some bugs that are introduced take ages to be fixed. For example <a href="https://bugs.chromium.org/p/chromium/issues/detail?id=647974">Chrome introduced a bad Web Audio bug</a> in version 53 and it was not fixed before version 57. It broke my production code and caused me to pull my hair off for several months.</p>\n</body>\n</html>\n'}[e.url]})})),ae=function(){var e=Object(c.h)().slug,a=ee.filter(function(a){return a.url.split("/").slice(-1)[0]===e});if(a.length<1)return"Blog post not found";var n=a[0];return s.a.createElement(_,{className:"BlogPost"},s.a.createElement(F,{text:n.title}),s.a.createElement("div",{className:"BlogPost__publish_date"},"Publication date : ",n.date),s.a.createElement("div",{className:"BlogPost__content",dangerouslySetInnerHTML:{__html:n.htmlStr}}))},ne=function(){return s.a.createElement(_,null,s.a.createElement(F,{text:"racolage.xxx"}),s.a.createElement("p",null,s.a.createElement("a",{href:"http://racolage.xxx"},"racolage.xxx")," is a record label that releases experimental music through spam."),s.a.createElement("p",null,"During its more than 2 years of existence, racolage.xxx has so far released 26 singles and produced 4 live shows. It has diffused music using different spamming techniques such as email, tinder, porn streaming, Chaturbate, YouTube phishing, gig economy platforms, academia.edu and porn ad networks."),s.a.createElement("p",null,"racolage.xxx represents the culture of blatant self-promotion prevalent in music and the arts. It is the parody (except it is real) of a small cultural organization that desperately fights online, in an increasingly tense attention economy, where visibility is getting scarcer."),s.a.createElement("p",null,"Anything goes to steal a small audience share."),s.a.createElement("h2",null,"Press"),s.a.createElement("ul",null,s.a.createElement("li",null,s.a.createElement("a",{href:"https://www.letagparfait.com/fr/2018/06/19/porno-noise-et-branlr-room-racolage-xxx-le-label-qui-vous-spam/"},'Interview (in French) in "Le Tag Parfait", a French magazine about porn culture.')),s.a.createElement("li",null,s.a.createElement("a",{href:"https://medium.com/@jamesthornhill_80725/shadow-sounds-eba5bbc589cd"},"Article about racolage.xxx by James Thornhill, originally published in Notion Magazine.")),s.a.createElement("li",null,s.a.createElement("a",{href:"https://www.traxmag.com/ce-label-a-eu-une-idee-geniale-et-incongrue-promouvoir-sa-musique-sur-des-sites-porno-et-sur-tinder/"},"Interview (in French) in Trax Magazine."))),s.a.createElement("h2",null,"Gallery"),s.a.createElement(q,{src:"/images/projects/racolagexxx-5.png"}),s.a.createElement(q,{src:"/images/projects/racolagexxx-6.jpg"}),s.a.createElement(q,{src:"/images/projects/racolagexxx-7.jpg"}),s.a.createElement(q,{src:"/images/projects/racolagexxx-8.jpg"}),s.a.createElement(q,{src:"/images/projects/racolagexxx-9.jpg"}),s.a.createElement(q,{src:"/images/projects/racolagexxx-10.jpg"}),s.a.createElement("h2",null,"Links"),s.a.createElement("ul",null,s.a.createElement("li",null,s.a.createElement("a",{href:"https://racolage.xxx"},"racolage.xxx website")),s.a.createElement("li",null,s.a.createElement("a",{href:"https://www.facebook.com/racolage"},"Facebook page")),s.a.createElement("li",null,s.a.createElement("a",{href:"https://www.facebook.com/jane.racolage.1"},"Jane Racolage, the fictitious founder of the label"))))},te=function(){return s.a.createElement(_,null,s.a.createElement(F,{text:"HYPEREXISTENCE (work in progress)"}),s.a.createElement("p",null,"Environmental destruction, absurd levels of inequality, growing cynicism and a feeling of powerlessness characterize the state of \u201clate capitalism\u201d we are living in today. The very possibility of collective action is asphyxiatied by the dominant globalized culture of the West, which holds an entrenched belief in the omnipotence of the individual."),s.a.createElement("p",null,"HYPEREXISTENCE is a web essay about this impasse. It articulates the impossibility of participating in contemporary society without taking part in the prevailing culture of individualism. It documents this culture, which manifests itself through the ubiquity of self-expression, through the careful self-branding of public persona, and through the ruthless instrumentalization of others for the acquisition of reputation."),s.a.createElement("h2",null,"Links"),s.a.createElement("ul",null,s.a.createElement("li",null,s.a.createElement("a",{href:"https://hyperexistence.me"},"HYPEREXISTENCE Website"))))},se=(n(55),n(56),$.map(function(e,a){return Object(H.a)({},e,{timestamp:v(e.date),type:{"blog-post":"blog post",academic:"academic article",essay:"essay"}[e.type]})}));se=V()(se,function(e){return-e.timestamp});var oe=function(){var e=se.map(function(e,a){return s.a.createElement("li",{key:a},s.a.createElement("span",{className:"Articles__date"},e.date),e.externalUrl?s.a.createElement("a",{href:e.externalUrl,target:"_blank",rel:"noreferrer noopener"},s.a.createElement("span",{className:"Articles__name"},e.title)):s.a.createElement(T,{href:e.url},s.a.createElement("span",{className:"Articles__name"},e.title)),s.a.createElement("div",{className:"Articles__info"},e.type))});return s.a.createElement(_,{className:"Articles"},s.a.createElement(F,{text:"Articles and blog posts"}),s.a.createElement("ul",null,e))};function re(){return s.a.createElement(A,null,s.a.createElement(P,{header:"Past and present activities",url:"/brag",preview:"A list of jobs, concerts, lectures."}),s.a.createElement(P,{header:"Articles and blog posts",url:"/articles",preview:se.slice(0,4).map(function(e){return s.a.createElement(s.a.Fragment,null,s.a.createElement("div",null,e.title),s.a.createElement("br",null))})}),s.a.createElement(j,null),s.a.createElement(P,{header:"hyperexistence",activityType:"project",date:"2020-...",url:"/hyperexistence",preview:"(Work In Progress). A web essay on individualism in late capitalist society."}),s.a.createElement(P,{header:"racolage.xxx",activityType:"project",date:"2017-2020",url:"/racolagexxx",preview:"A record label that releases experimental music through spam email, porn streaming sites, tinder, and other spammy release channels..."}),s.a.createElement(P,{header:"Freedom Portal",activityType:"project",date:"2016-2017",url:"/freedom-portal",preview:"A platform to organize unauthorized shows in the public space, hosted on Wi-Fi networks."}),s.a.createElement(P,{header:"La Jet\xe9e (movie-concert)",activityType:"project",date:"2016",url:"/la-jetee",preview:"A re-score of short film La Jet\xe9e by Chris Marker, in a performance that explores digital mobile technology and hyperlocal networks for surround sound diffusion."}),s.a.createElement(P,{header:"Murmurate",activityType:"project",date:"2014-2016",url:"/murmurate",preview:"A networked system exploring new areas of musical performance and audience participation through the use of mobile technology as a medium for sound diffusion."}),s.a.createElement(P,{header:"Possessed Rooms",activityType:"project",date:"2016",url:"/possessed-rooms",preview:"A series of parasitic performances happening in public computer rooms."}),s.a.createElement(P,{header:"New Weave",activityType:"project",date:"2015",url:"/new-weave",preview:"An experimental sound performance where the performers improvise with small audio snippets recorded and sent live by audience members with their smartphones."}),s.a.createElement(P,{header:"WebPd",activityType:"code",date:"2012...",url:"/webpd",preview:"A 100% JavaScript Pure Data runtime using Web Audio API to play audio in the browser."}),s.a.createElement(P,{header:"Pure Data and Raspberry Pi",activityType:"workshop",date:"2014",url:"/pure-data-and-raspberry-pi-workshops",preview:"A workshop to teach how to program and design a pocket-sized instrument with Pure Data and Raspberry Pi."}))}var ie=function(){return s.a.createElement("div",{className:"App"},s.a.createElement(l.a,{handleWidth:!0,handleHeight:!0},s.a.createElement(I,null)),s.a.createElement(i.a,null,s.a.createElement(c.d,null,s.a.createElement(c.b,{path:"/",exact:!0,component:re}),s.a.createElement(c.b,{path:"/freedom-portal/",component:N}),s.a.createElement(c.b,{path:"/racolagexxx/",component:ne}),s.a.createElement(c.b,{path:"/hyperexistence/",component:te}),s.a.createElement(c.b,{path:"/la-jetee/",component:O}),s.a.createElement(c.b,{path:"/murmurate/",component:M}),s.a.createElement(c.b,{path:"/new-weave/",component:D}),s.a.createElement(c.b,{path:"/pure-data-and-raspberry-pi-workshops/",component:L}),s.a.createElement(c.b,{path:"/webpd/",component:B}),s.a.createElement(c.b,{path:"/possessed-rooms/",component:R}),s.a.createElement(c.b,{path:"/brag/",component:Q}),s.a.createElement(c.b,{path:"/articles/:slug",component:ae}),s.a.createElement(c.b,{path:"/articles/",component:oe}),s.a.createElement(c.a,{from:"/*",to:"/"}),s.a.createElement(c.b,{component:re}))))};Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));r.a.render(s.a.createElement(ie,null),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}],[[36,1,2]]]);
//# sourceMappingURL=main.74a8f9a0.chunk.js.map